{
	"info": {
		"_postman_id": "3d8b977b-9ec9-4741-9fb5-4de2df4c7a21",
		"name": "PetAppV7_Staging",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28342987"
	},
	"item": [
		{
			"name": "Sign up",
			"item": [
				{
					"name": "Sign up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Extract OTP and Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"signupOTP\", jsonData.otp);\r",
									"    pm.environment.set(\"signupToken\", jsonData.token);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of names\r",
									"const names = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// List of domain names\r",
									"const domains = [\r",
									"    \"gmail.com\", \"yahoo.com\", \"outlook.com\", \"hotmail.com\", \"icloud.com\", // General\r",
									"    \"agilecyber.com\", \"agilecybersolutions.com\", // Company domains\r",
									"    \"mail.com\", \"protonmail.com\", \"zoho.com\", // Other common domains\r",
									"\r",
									"    // Country-specific domains\r",
									"    \"hotmail.co.uk\", \"yahoo.co.uk\", \"aol.co.uk\", \"btinternet.com\", // UK domains\r",
									"    \"gmail.com.au\", \"hotmail.com.au\", \"yahoo.com.au\", \"outlook.com.au\", // AU domains\r",
									"    \"yahoo.co.in\", \"rediffmail.com\", \"hotmail.co.in\", \"gmail.co.in\", // India domains\r",
									"    \"mail.ru\", \"yandex.ru\", \"rambler.ru\", // Russia domains\r",
									"    \"163.com\", \"qq.com\", \"sina.com\", // China domains\r",
									"\r",
									"    // Subdomains\r",
									"    \"blogspot.com\", \"wordpress.com\", \"tumblr.com\", // Blogging platforms\r",
									"    \"github.com\", \"gitlab.com\", \"bitbucket.org\", // Version control platforms\r",
									"    \"drive.google.com\", \"docs.google.com\", // Google services\r",
									"    \"dropbox.com\", \"box.com\", // File storage services\r",
									"\r",
									"];\r",
									" \r",
									"// Function to generate a unique email with random 5-digit number\r",
									"function generateUniqueEmail() {\r",
									"    const randomIndexName = Math.floor(Math.random() * names.length);\r",
									"    const randomName = names[randomIndexName].toLowerCase();\r",
									"    \r",
									"    const randomIndexDomain = Math.floor(Math.random() * domains.length);\r",
									"    const randomDomain = domains[randomIndexDomain];\r",
									" \r",
									"    const uniqueIdentifier = Math.floor(10000 + Math.random() * 90000); // Generate random 5-digit number\r",
									" \r",
									"    return `${randomName}_${uniqueIdentifier}@${randomDomain}`;\r",
									"}\r",
									"\r",
									"// Generate and set the unique email address\r",
									"const uniqueEmail = generateUniqueEmail();\r",
									"pm.variables.set(\"signup-email\", uniqueEmail);\r",
									"\r",
									"// Log the generated unique email for verification\r",
									"console.log(\"Generated Unique Email:\", uniqueEmail);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{signup-email}}\",\r\n    \"app_key\": \"0123456789abcdef\",\r\n    \"system_user\": \"No\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/auth/mail-sign-up",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"auth",
								"mail-sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign up-OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const res = pm.response.json();\r",
									"\r",
									"// Check if the response contains the OTP and access token\r",
									"if (res.access_token && res.refresh_token) {\r",
									"    // Store OTP and access token in environment variables\r",
									"    pm.environment.set('signup_access_token', res.access_token);\r",
									"    pm.environment.set('signup_refresh_token', res.refresh_token);\r",
									"    console.log(pm.environment.otp);\r",
									"} else {\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"otp\": \"{{signupOTP}}\",\r\n    \"token\": \"{{signupToken}}\",\r\n    \"device_id\": \"e07061c9-acf1-432f-ad82-c065190f1201\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/auth/token",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"User Email\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"signup-user\", jsonData.email);\r",
									"    pm.environment.set(\"user-reject-id\", jsonData.user_id);\r",
									"   \r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{signup_refresh_token}}\",\r\n    \"device_id\": \"e07061c9-acf1-432f-ad82-c065190f1201\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/auth/refresh_token",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"auth",
								"refresh_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sign in Admin",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Extract OTP and Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"Admin_signinOTP\", jsonData.otp);\r",
									"    pm.environment.set(\"Admin_signinToken\", jsonData.token);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"petcarea54@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/auth/mail-sign-in",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"auth",
								"mail-sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in-OTP (Authtoken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									" // Parse the response JSON\r",
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"if (res.refresh_token) {\r",
									"\r",
									"   pm.environment.set('Admin_refresh_token', res.refresh_token);\r",
									"\r",
									"    console.log(pm.environment.otp);\r",
									"\r",
									"} else {\r",
									"\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"otp\": \"345765\",\r\n    \"token\": \"{{Admin_signinToken}}\",\r\n    \"device_id\": \"e07061c9-acf1-432f-ad82-c065190f1201\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const res = pm.response.json();\r",
									"\r",
									"// Check if the response contains the OTP and access token\r",
									"if (res.access_token && res.refresh_token) {\r",
									"    // Store OTP and access token in environment variables\r",
									"    //pm.environment.set('access_token', res.access_token);\r",
									"    pm.environment.set('Admin_refresh_token1', res.refresh_token);\r",
									"    console.log(pm.environment.otp);\r",
									"} else {\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{Admin_refresh_token}}\",\r\n    \"device_id\": \"e07061c9-acf1-432f-ad82-c065190f1201\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/refresh_token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"refresh_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sign in Customer",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Extract OTP and Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"signinOTP\", jsonData.otp);\r",
									"    pm.environment.set(\"signinToken\", jsonData.token);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"petcarecustomer42@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/auth/mail-sign-in",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"auth",
								"mail-sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in-OTP (Authtoken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									" // Parse the response JSON\r",
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"if (res.refresh_token) {\r",
									"\r",
									"   pm.environment.set('refresh_token', res.refresh_token);\r",
									"\r",
									"    console.log(pm.environment.otp);\r",
									"\r",
									"} else {\r",
									"\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"otp\": \"456321\",\r\n    \"token\": \"{{signinToken}}\",\r\n    \"device_id\": \"e07061c9-acf1-432f-ad82-c065190f1201\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const res = pm.response.json();\r",
									"pm.environment.set(\"user_id_1\", res.user_id);\r",
									"// Check if the response contains the OTP and access token\r",
									"if (res.access_token && res.refresh_token) {\r",
									"    // Store OTP and access token in environment variables\r",
									"    //pm.environment.set('access_token', res.access_token);\r",
									"    pm.environment.set('refresh_token1', res.refresh_token);\r",
									"    console.log(pm.environment.otp);\r",
									"} else {\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{refresh_token}}\",\r\n    \"device_id\": \"e07061c9-acf1-432f-ad82-c065190f1201\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/refresh_token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"refresh_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sign in staff",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Extract OTP and Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"Staff_signinOTP\", jsonData.otp);\r",
									"    pm.environment.set(\"Staff_signinToken\", jsonData.token);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"staffpetcare@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/auth/mail-sign-in",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"auth",
								"mail-sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in-OTP (Authtoken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" // Parse the response JSON\r",
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"if (res.refresh_token) {\r",
									"\r",
									"   pm.environment.set('Staff_refresh_token', res.refresh_token);\r",
									"\r",
									"    console.log(pm.environment.otp);\r",
									"\r",
									"} else {\r",
									"\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"otp\": \"234567\",\r\n    \"token\": \"{{Staff_signinToken}}\",\r\n    \"device_id\": \"e07061c9-acf1-432f-ad82-c065190f1201\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const res = pm.response.json();\r",
									"\r",
									"// Check if the response contains the OTP and access token\r",
									"if (res.access_token && res.refresh_token) {\r",
									"    // Store OTP and access token in environment variables\r",
									"    //pm.environment.set('access_token', res.access_token);\r",
									"    pm.environment.set('Staff_refresh_token1', res.refresh_token);\r",
									"    console.log(pm.environment.otp);\r",
									"} else {\r",
									"    console.error(\"OTP or access token not found in the response.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{Staff_refresh_token}}\",\r\n    \"device_id\": \"e07061c9-acf1-432f-ad82-c065190f1201\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/refresh_token",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"refresh_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Menu",
			"item": [
				{
					"name": "User menu list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/menu_page_list",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User menu list service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}service/menu_page_list",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User menu list payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}payment/menu_page_list",
							"host": [
								"{{Url}}payment"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User menu list booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}booking/menu_page_list",
							"host": [
								"{{Url}}booking"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User menu list invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}invoice/menu_page_list",
							"host": [
								"{{Url}}invoice"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User menu list calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}calendar/menu_page_list",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "my-profile customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/customer/my-profile",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"customer",
								"my-profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Staff Menu",
			"item": [
				{
					"name": "Staff menu list calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}calendar/menu_page_list",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff menu list booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}booking/menu_page_list",
							"host": [
								"{{Url}}booking"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff menu list service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}service/menu_page_list",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff menu list user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/menu_page_list",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "my-profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}calendar/staff/my-profile",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"staff",
								"my-profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Menu",
			"item": [
				{
					"name": "Admin menu list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/menu_page_list",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "my-profile admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/admin/my-profile",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"admin",
								"my-profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin menu list payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}payment/menu_page_list",
							"host": [
								"{{Url}}payment"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin menu list booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}booking/menu_page_list",
							"host": [
								"{{Url}}booking"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin menu service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}service/menu_page_list",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin menu list calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}calendar/menu_page_list",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin menu list invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}invoice/menu_page_list",
							"host": [
								"{{Url}}invoice"
							],
							"path": [
								"menu_page_list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Benfeciary subtype",
			"item": [
				{
					"name": "subtype- Structure",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/form-structure/fields/beneficiary_subtype",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form-structure",
								"fields",
								"beneficiary_subtype"
							]
						}
					},
					"response": []
				},
				{
					"name": "subtype-create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const petServices = [\r",
									"    \"Pet Spa Day\",\r",
									"    \"Cat Yoga Sessions\",\r",
									"    \"Pet Boarding Paradise\",\r",
									"    \"Puppy Playdate Camp\",\r",
									"    \"Tail Wagging Therapy\",\r",
									"    \"Feline Fine Dining\",\r",
									"    \"Ruff and Tumble Playtime\",\r",
									"    \"Pet Psychic Consultation\",\r",
									"    \"Paw-some Painting Workshops\",\r",
									"    \"Meow-tastic Movie Nights\",\r",
									"    \"Pet Astrology Readings\",\r",
									"    \"Pet Psychic Consultation\",\r",
									"    \"Bird Watching Adventures\",\r",
									"    \"Exotic Pet Grooming\",\r",
									"    \"Reptile Relaxation Retreat\",\r",
									"    \"Pocket Pet Pampering\",\r",
									"    \"Feathered Friends Photo Shoots\",\r",
									"    \"Rabbit Romp Sessions\",\r",
									"    \"Fish Tank Feng Shui\",\r",
									"    \"Guinea Pig Gourmet Cooking\",\r",
									"    \"Turtle Terrarium Tours\",\r",
									"    \"Small Animal Spa Retreat\",\r",
									"    \"Hamster Hide-and-Seek Classes\",\r",
									"    \"Amphibian Adventure Walks\",\r",
									"    \"Insect Insight Workshops\",\r",
									"    \"Pet Psychic Consultation\",\r",
									"    \"Aquarium Aqua Fitness\",\r",
									"    \"Pet Talent Show Extravaganza\",\r",
									"    \"Petting Zoo Picnics\",\r",
									"    \"Creature Comfort Cuddling\",\r",
									"    \"Butterfly Ballet Lessons\",\r",
									"    \"Pet Poetry Reading Circles\",\r",
									"    \"Lizard Lounge Lounging\",\r",
									"    \"Whisker Whittling Workshop\",\r",
									"    \"Tarantula Tango Dance Classes\",\r",
									"    \"Rodent Rendezvous Parties\",\r",
									"    \"Jungle Jamming Jamboree\",\r",
									"    \"Critter Carnival Celebrations\",\r",
									"    \"Bug Banquet Feasts\",\r",
									"    \"Pet Painting and Pottery\",\r",
									"    \"Pet Fashion Fiesta\",\r",
									"    \"Penguin Parade Excursions\",\r",
									"    \"Petting Zoo Play Pals\",\r",
									"    \"Paw-sitively Perfect Portraits\",\r",
									"    \"Pet Olympics Obstacle Course\",\r",
									"    \"Snuggle Safari Soiree\",\r",
									"    // Add more services as needed\r",
									"];\r",
									"\r",
									"\r",
									"// Generate a random index\r",
									"const randomIndex = Math.floor(Math.random() * petServices.length);\r",
									"\r",
									"// Set the 'random_service_name' variable with the randomly selected service name\r",
									"pm.variables.set('random_service_name', petServices[randomIndex]);\r",
									"\r",
									"// Log the selected service name for verification (optional)\r",
									"console.log(\"Random Service Name:\", pm.variables.get('random_service_name'));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Generate a random base price between 10 and 1000 (adjust range as needed)\r",
									"const basePrice = Math.floor(Math.random() * (1000 - 10 + 1)) + 10;\r",
									"\r",
									"// Set the random base price as a global environment variable named \"base_price\"\r",
									"pm.globals.set(\"base_price\", basePrice);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const ServiceNamePart1 = [\"Pet Boarding\", \"Dog Walking\", \"Pet Sitting\", \"Veterinary Services\", \"Pet Grooming\"];\r",
									"const ServiceNamePart2 = [\"Training\", \"Daycare\", \"Transportation\", \"Photography\"];\r",
									"const ServiceNamePart3 = [\"Professional\", \"Elite\", \"Premium\", \"Specialized\", \"Customized\"];\r",
									"\r",
									"// Function to get a random service name\r",
									"function getRandomServiceName() {\r",
									"    const randomPart1Index = Math.floor(Math.random() * ServiceNamePart1.length);\r",
									"    const randomPart2Index = Math.floor(Math.random() * ServiceNamePart2.length);\r",
									"    const randomPart3Index = Math.floor(Math.random() * ServiceNamePart3.length);\r",
									"\r",
									"    const randomServiceName = `${ServiceNamePart1[randomPart1Index]} ${ServiceNamePart2[randomPart2Index]} ${ServiceNamePart3[randomPart3Index]}`;\r",
									"    return randomServiceName;\r",
									"}\r",
									"\r",
									"// Get a random service name\r",
									"const randomService = getRandomServiceName();\r",
									"\r",
									"// Set the random service name as a global environment variable\r",
									"pm.globals.set(\"random_service_name\", randomService);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Generate a random base price between 10 and 1000 (adjust range as needed)\r",
									"const basePrice = Math.floor(Math.random() * (1000 - 10 + 1)) + 10;\r",
									"\r",
									"// Set the random base price as a global environment variable named \"base_price\"\r",
									"pm.globals.set(\"base_price\", basePrice);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 2,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"Blue Lacy\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "beneficiary_subtype list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();\r",
									"\r",
									"postman.setEnvironmentVariable(\"beneficiary_subtype_ID_del\", responseJson.data[0][\"id\"]);\r",
									"postman.setEnvironmentVariable(\"beneficiary_subtype_ID_name\", responseJson.data[0][\"name\"]);\r",
									"\r",
									"\r",
									"// Assuming responseJson.data is an array containing objects with a \"name\" field\r",
									"const randomIndex = Math.floor(Math.random() * responseJson.data.length); // Get a random index within the array length\r",
									"const randomName = responseJson.data[randomIndex][\"name\"]; // Get the \"name\" from the randomly selected index\r",
									"\r",
									"postman.setEnvironmentVariable(\"beneficiary_subtype\", randomName); // Set the random name to the environment variable\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/beneficiary_subtype",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"beneficiary_subtype"
							]
						}
					},
					"response": []
				},
				{
					"name": "subtype-update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{beneficiary_subtype_ID_del}},\r\n            \"name\": \"{{beneficiary_subtype_ID_name}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=2",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "subtype delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// if (pm.response.code === 400) {\r",
									"//     // Treat it as a successful response (200 OK)\r",
									"//     pm.test(\"Status code is 200 for a 400 response\", function () {\r",
									"//         pm.response.to.have.status(200);\r",
									"//     });\r",
									"\r",
									"//     // You may add additional tests or actions for a 400 response here if needed\r",
									"\r",
									"//     // Log a message (optional)\r",
									"//     console.log(\"Response status 400 treated as 200 OK\");\r",
									"// }\r",
									"if (pm.response.code === 400) {\r",
									"    // Override the status code to 200\r",
									"    pm.response.code = 200;\r",
									"\r",
									"    // Log a message (optional)\r",
									"    console.log(\"Response status 400 treated as 200 OK\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\" : [{{beneficiary_subtype_ID_del}}]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit/bulk?form_id=2",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "beneficiary_subtype list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"beneficiary_subtype_ID\", responseJson.data[0][\"id\"]);\r",
									"\r",
									"// Assuming responseJson.data is an array containing objects with a \"name\" field\r",
									"const randomIndex = Math.floor(Math.random() * responseJson.data.length); // Get a random index within the array length\r",
									"const randomName = responseJson.data[randomIndex][\"name\"]; // Get the \"name\" from the randomly selected index\r",
									"\r",
									"postman.setEnvironmentVariable(\"beneficiary_subtype\", randomName); // Set the random name to the environment variable\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Extract all the 'id' values\r",
									"var ids = responseJson.data.map(function(item) {\r",
									"    return item.id;\r",
									"});\r",
									"\r",
									"// Set the 'suptype_id' variable with the extracted IDs as a string (comma-separated)\r",
									"postman.setEnvironmentVariable('subtype_id', ids.join(','));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/beneficiary_subtype",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"beneficiary_subtype"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Organisational Settings",
			"item": [
				{
					"name": "Form structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/user/form-structure/fields/organization_settings",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"form-structure",
								"fields",
								"organization_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoice List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Get the data array containing IDs\r",
									"const responseData = responseJson.data;\r",
									"\r",
									"// Generate a random index within the array length\r",
									"const randomIndex = Math.floor(Math.random() * responseData.length);\r",
									"\r",
									"// Get the random ID from the randomly selected index\r",
									"const randomId = responseData[randomIndex].id;\r",
									"\r",
									"// Set the random ID as an environment variable named \"random_id\"\r",
									"pm.environment.set(\"invoice_id\", randomId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/invoice_settings",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"invoice_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"currency_ID\", responseJson.data[0][\"id\"]);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/currency",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "payment List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Get the data array containing IDs\r",
									"const responseData = responseJson.data;\r",
									"\r",
									"// Generate a random index within the array length\r",
									"const randomIndex = Math.floor(Math.random() * responseData.length);\r",
									"\r",
									"// Get the random ID from the randomly selected index\r",
									"const randomId = responseData[randomIndex].id;\r",
									"\r",
									"// Set the random ID as an environment variable named \"random_id\"\r",
									"pm.environment.set(\"payment_id\", randomId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/payment_settings",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"payment_settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"organization_ID\", responseJson.data[0][\"id\"]);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/organization_settings",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"organization_settings"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Time Slots",
			"item": [
				{
					"name": "Structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}service/form-structure/fields/time_slots ",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form-structure",
								"fields",
								"time_slots "
							]
						}
					},
					"response": []
				},
				{
					"name": "create-time slot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of time slot names\r",
									"let timeSlotNames = [\r",
									"    \"Night\", \"Early Morning\",\r",
									"    \"Late Morning\", \"Late Afternoon\", \"Twilight\", \"Dusk\", \"Dawn\",\r",
									"    \"Midnight\", \"Noon\", \"Sunrise\", \"Sunset\", \"Mid-Morning\",\r",
									"    \"Mid-Afternoon\", \"Late Night\", \"Early Evening\", \"Late Evening\", \"Early Afternoon\",\r",
									"    \"Late Dawn\", \"Early Dusk\", \"Late Dusk\", \"Early Twilight\", \"Late Twilight\",\r",
									"    \"Early Sunset\", \"Late Sunrise\", \"Early Midnight\", \"Late Noon\", \"Midnight Snack\"\r",
									"];\r",
									"\r",
									"// Function to get a random time slot name and remove it from the list\r",
									"function getRandomTimeSlotName() {\r",
									"    const randomIndex = Math.floor(Math.random() * timeSlotNames.length);\r",
									"    const selectedTimeSlotName = timeSlotNames[randomIndex];\r",
									"    timeSlotNames.splice(randomIndex, 1); // Remove the selected time slot name from the list\r",
									"    return selectedTimeSlotName;\r",
									"}\r",
									"\r",
									"// Set the environment variable with the generated time slot name\r",
									"pm.environment.set('randomTimeSlotName', getRandomTimeSlotName());\r",
									"\r",
									"// Log the generated time slot name for verification (optional)\r",
									"console.log(\"Random Time Slot Name:\", pm.environment.get('randomTimeSlotName'));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 2,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"Twlight\",\r\n            \"description\": \"Twlight\",\r\n             \"start_time\": \"06:00\",\r\n            \"end_time\": \"14:00\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/form_submit",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"// Check if the response has the expected structure\r",
									"if (data && data.success && Array.isArray(data.data) && data.data.length > 0) {\r",
									"    postman.setEnvironmentVariable(\"Slot_id_del\", data.data[0]['id']);\r",
									"    postman.setEnvironmentVariable(\"Slot_name_del\", data.data[0]['name']);\r",
									"    postman.setEnvironmentVariable(\"Slot_id_delete\", data.data[0]['id']);\r",
									"\r",
									"    var ids = data.data.map(function (item) {\r",
									"        return item.id;\r",
									"    });\r",
									"\r",
									"    // Set the 'slot_id_list' variable with the extracted IDs as a string (comma-separated)\r",
									"    postman.setEnvironmentVariable('slot_id_list', ids.join(','));\r",
									"}\r",
									"\r",
									"// Perform the status code check\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}service/list/time_slots",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"list",
								"time_slots"
							]
						}
					},
					"response": []
				},
				{
					"name": "update slot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Slot_id_del}},\r\n            \"name\": \"{{Slot_name_del}}\",\r\n            \"description\":\"{{Slot_name_del}}\",\r\n             \"start_time\": \"06:00\",\r\n            \"end_time\": \"14:00\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/service/form_submit?form_id=2",
							"host": [
								"{{Url}}"
							],
							"path": [
								"service",
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "slot delete Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// if (pm.response.code === 400) {\r",
									"//     // Treat it as a successful response (200 OK)\r",
									"//     pm.test(\"Status code is 200 for a 400 response\", function () {\r",
									"//         pm.response.to.have.status(200);\r",
									"//     });\r",
									"\r",
									"//     // You may add additional tests or actions for a 400 response here if needed\r",
									"\r",
									"//     // Log a message (optional)\r",
									"//     console.log(\"Response status 400 treated as 200 OK\");\r",
									"// }\r",
									"if (pm.response.code === 400) {\r",
									"    // Override the status code to 200\r",
									"    pm.response.code = 200;\r",
									"\r",
									"    // Log a message (optional)\r",
									"    console.log(\"Response status 400 treated as 200 OK\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\" : [{{Slot_id_del}}]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/form_submit/bulk?form_id=2",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "time slot List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"// Check if the response has the expected structure\r",
									"if (data && data.success && Array.isArray(data.data) && data.data.length > 0) {\r",
									"    postman.setEnvironmentVariable(\"Slot_id\", data.data[0]['id']);\r",
									"    postman.setEnvironmentVariable(\"Slot_name\", data.data[0]['name']);\r",
									"    postman.setEnvironmentVariable(\"Slot_id_delete\", data.data[0]['id']);\r",
									"\r",
									"    var ids = data.data.map(function (item) {\r",
									"        return item.id;\r",
									"    });\r",
									"\r",
									"    // Set the 'slot_id_list' variable with the extracted IDs as a string (comma-separated)\r",
									"    postman.setEnvironmentVariable('slot_id_list', ids.join(','));\r",
									"}\r",
									"\r",
									"// Perform the status code check\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}service/list/time_slots",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"list",
								"time_slots"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Pricing_rule",
			"item": [
				{
					"name": "create pricing rule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Array of descriptive pricing rule names\r",
									"const ruleNames = [\"Christmas\", \"Halloween\", \"BankHoliday\", \"MonthEnd\", \"Summer\", \"Winter\", \"Spring\", \"Autumn\", \"NewYear\", \"Easter\", \"BlackFriday\", \"CyberMonday\", \"Valentines\", \"Independence\", \"LaborDay\", \"BackToSchool\", \"FathersDay\", \"MothersDay\", \"Thanksgiving\", \"ColumbusDay\", \"MemorialDay\", \"VeteransDay\", \"PresidentsDay\", \"EarthDay\", \"ArborDay\", \"Patriotic\", \"Fiesta\", \"Carnival\", \"Oktoberfest\", \"Harvest\", \"Festival\", \"Cultural\", \"Global\", \"Local\", \"Community\", \"Worldwide\", \"National\", \"International\", \"Regional\", \"Seasonal\", \"Special\", \"Limited\", \"Exclusive\", \"Grand\", \"Mega\", \"Super\", \"Ultra\", \"Extra\", \"Gala\", \"Celebration\", \"Anniversary\", \"Jubilee\", \"Promotion\", \"Deal\", \"Discount\", \"Offer\", \"Sale\", \"Savings\", \"Bargain\", \"Clearance\", \"Value\", \"Bonanza\", \"SpecialOffer\", \"FlashSale\", \"HotDeal\", \"BigSale\", \"DiscountDays\", \"DealWeek\", \"BargainMonth\", \"SuperSaver\", \"ExclusiveOffer\", \"LimitedTime\", \"OneTime\", \"OnceInALifetime\", \"BiggestSale\", \"BestDeal\", \"GreatSavings\", \"AwesomeOffer\", \"FantasticDeal\", \"RemarkableSale\", \"TerrificDiscount\", \"UnbeatablePrice\", \"ExtraordinaryValue\", \"PhenomenalOffer\", \"IncredibleSavings\", \"SpectacularSale\", \"StellarDeal\", \"FabulousDiscount\", \"AmazingPrice\", \"OutstandingOffer\", \"MarvelousDeal\", \"AstoundingSavings\"];\r",
									"\r",
									"// Generate a random index to select a rule name from the array\r",
									"const randomIndex = Math.floor(Math.random() * ruleNames.length);\r",
									"\r",
									"// Get the randomly selected rule name\r",
									"const randomRuleName = ruleNames[randomIndex];\r",
									"\r",
									"// Set the environment variable with the randomly selected rule name\r",
									"pm.environment.set(\"pricing_rule_name\", randomRuleName);\r",
									"\r",
									"// Log the generated rule name for verification (optional)\r",
									"console.log(\"Generated Pricing Rule Name:\", randomRuleName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJhYmlzaGErYWRtaW5AYWdpbGVjeWJlcnNvbHV0aW9ucy5jb20iLCJ1c2VyX2lkIjoxMDEsInN1YnNjcmliZXJfaWQiOjEsImV4cCI6MTcxODI2MTIxOSwibGljZW5zZV9pZCI6MSwiYXBwX3VybCI6Imh0dHBzOi8vc3RhZ2luZy1ib29raW5nLmFnaWxlY3liZXIuY29tLyIsInVzZXJfZGJfY3JlZGVudGlhbCI6IlVlRUc2M3U5YmFWVUU1bFJyNHh5TTdNbktlS1I3ekpRTGFhb3RZTjE2YmhQY045M1NpRExpWmNoVklTdXZWR3krYVUzZVZ3cStIUktxMitRVSt0Q2J2ci9rVEF5cG5KRVp4YXVHY291Y09CeTlKWHZBeFAvZUFsK3N4bENPb1laIiwic2VydmljZV9kYl9jcmVkZW50aWFsIjoiMzZaQzVSa0lPMk5YazdDaFdFTU00WUxEYWxxdXRraS93MHlFUXl4cXVFeVRpUXZrZ3lhRy91dHhJaHVtMmpOK1FmNncwanZqZVVjTjFLRFJ1eE02RWZOMFBjS1h2aDdHazI0Z1NqYWg5WFpwK2NsMmFRYXVjTFlibEtlOWExSHciLCJib29raW5nX2RiX2NyZWRlbnRpYWwiOiJ2RGR5T2xmbWNwQUYxOUdCSTdHWncwWlNTSTI1TnNPRGtTR3l3djhPaDRXZWJpdSt1Mzg1bG14VlVROFBKUVpMMWZ6QS9lbGt5QjFiWG9MN05sSSs5bXFIRXd6SDRWZUZwamtJd01FYVhpVEhXM2RJMHFoZ0EwSnVHUVNGb0VrdiIsImNhbGVuZGFyX2RiX2NyZWRlbnRpYWwiOiIxL3RLRW5SZ250Q2lNQjdKKzk5VmFNc0txZWlmazdlRG85YTR0QitMY0JPajlKRHkxcUFDSXFjdTFad1Z4T000TFczUTYwdWNkUEM1VnpMV1lYNnBTSGUrWmxIYlJZTkVzL1JQa3oyamVWSGVaWGxyMENGa1dySGEyMU9CZ0VhcCIsImludm9pY2VfZGJfY3JlZGVudGlhbCI6IkVmRms5dDFKUWZLV3JSR2tvZnlUTVdpdkN5Yzh2T0tHTTR5Z0NqZXc0c212aEkzeTBIYkJ3V21QemtvRWEvR08vZVJiZDFOVDBYeTZTMU1Ca1ZGQ0VrUm45RUJJOUJXZkswSzh2VmVNWkdValo4NmI5enZuU253WVRGT0FpdnowIiwicGF5bWVudF9kYl9jcmVkZW50aWFsIjoia0ZPKzR1bzIrOXJLTDg2NGF0NTRTOHBGTkIvN25LcndRSkwxaDlodWxSWTU2dUNPTWQ0MVZOS3FETlRaSnF2UmtwbnBSdmJDelN6UlIxZ01CdmdEMGo1VUJvWHljeWZyRVU2RGlXMldJRERRTlJwN0d3a1h2R1V3ZzcxR0lMc3EifQ.hIdSY9qYBS16tHcWc2EBOATqh8MdsNhnTXuMNFmiiXE",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{pricing_rule_name}}\",\r\n    \"description\": \"\",\r\n    \"is_active\": 0,\r\n    \"priority\":1,\r\n    \"stop_execution\": 0,\r\n    \"repeat_type\": \"Weekly\",\r\n    \"repeat_details\": {\r\n       \"weekly_days\": [1]\r\n        \r\n        },\r\n    \"start_date\": \"2024-07-06\",\r\n     \"end_date\":\"2025-07-10\",\r\n    \"tag_ids\":[],\r\n    \"pricing_type\": \"Discount\",\r\n    \"slots\": [\r\n        {\r\n            \"id\": 24,\r\n            \"percentage\":10,\r\n            \"is_available\": 1\r\n        }\r\n        \r\n    ],\r\n    \"proceed\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/service/availability-pricing-rule/add",
							"host": [
								"{{Url}}"
							],
							"path": [
								"service",
								"availability-pricing-rule",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "list pricing rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON data\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Initialize variables to store the pricing_rule_id and name\r",
									"let pricingRuleId;\r",
									"let pricingRuleName;\r",
									"\r",
									"// Iterate through the response data\r",
									"for (const item of responseData.data) {\r",
									"    // Check if the priority is set to 1\r",
									"    if (item.priority === 1) {\r",
									"        // Set the pricing_rule_id and name, and break the loop\r",
									"        pricingRuleId = item.id;\r",
									"        pricingRuleName = item.name;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"// Set the environment variables with the pricing_rule_id and name\r",
									"pm.environment.set(\"pricing_rule_id\", pricingRuleId);\r",
									"pm.environment.set(\"pricing_rule_name\", pricingRuleName);\r",
									"\r",
									"// Log the pricing_rule_id and name for verification\r",
									"console.log(\"Pricing Rule ID with priority 1:\", pricingRuleId);\r",
									"console.log(\"Pricing Rule Name with priority 1:\", pricingRuleName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJhYmlzaGErYWRtaW5AYWdpbGVjeWJlcnNvbHV0aW9ucy5jb20iLCJ1c2VyX2lkIjoxMDEsInN1YnNjcmliZXJfaWQiOjEsImV4cCI6MTcxODI2MTIxOSwibGljZW5zZV9pZCI6MSwiYXBwX3VybCI6Imh0dHBzOi8vc3RhZ2luZy1ib29raW5nLmFnaWxlY3liZXIuY29tLyIsInVzZXJfZGJfY3JlZGVudGlhbCI6IlVlRUc2M3U5YmFWVUU1bFJyNHh5TTdNbktlS1I3ekpRTGFhb3RZTjE2YmhQY045M1NpRExpWmNoVklTdXZWR3krYVUzZVZ3cStIUktxMitRVSt0Q2J2ci9rVEF5cG5KRVp4YXVHY291Y09CeTlKWHZBeFAvZUFsK3N4bENPb1laIiwic2VydmljZV9kYl9jcmVkZW50aWFsIjoiMzZaQzVSa0lPMk5YazdDaFdFTU00WUxEYWxxdXRraS93MHlFUXl4cXVFeVRpUXZrZ3lhRy91dHhJaHVtMmpOK1FmNncwanZqZVVjTjFLRFJ1eE02RWZOMFBjS1h2aDdHazI0Z1NqYWg5WFpwK2NsMmFRYXVjTFlibEtlOWExSHciLCJib29raW5nX2RiX2NyZWRlbnRpYWwiOiJ2RGR5T2xmbWNwQUYxOUdCSTdHWncwWlNTSTI1TnNPRGtTR3l3djhPaDRXZWJpdSt1Mzg1bG14VlVROFBKUVpMMWZ6QS9lbGt5QjFiWG9MN05sSSs5bXFIRXd6SDRWZUZwamtJd01FYVhpVEhXM2RJMHFoZ0EwSnVHUVNGb0VrdiIsImNhbGVuZGFyX2RiX2NyZWRlbnRpYWwiOiIxL3RLRW5SZ250Q2lNQjdKKzk5VmFNc0txZWlmazdlRG85YTR0QitMY0JPajlKRHkxcUFDSXFjdTFad1Z4T000TFczUTYwdWNkUEM1VnpMV1lYNnBTSGUrWmxIYlJZTkVzL1JQa3oyamVWSGVaWGxyMENGa1dySGEyMU9CZ0VhcCIsImludm9pY2VfZGJfY3JlZGVudGlhbCI6IkVmRms5dDFKUWZLV3JSR2tvZnlUTVdpdkN5Yzh2T0tHTTR5Z0NqZXc0c212aEkzeTBIYkJ3V21QemtvRWEvR08vZVJiZDFOVDBYeTZTMU1Ca1ZGQ0VrUm45RUJJOUJXZkswSzh2VmVNWkdValo4NmI5enZuU253WVRGT0FpdnowIiwicGF5bWVudF9kYl9jcmVkZW50aWFsIjoia0ZPKzR1bzIrOXJLTDg2NGF0NTRTOHBGTkIvN25LcndRSkwxaDlodWxSWTU2dUNPTWQ0MVZOS3FETlRaSnF2UmtwbnBSdmJDelN6UlIxZ01CdmdEMGo1VUJvWHljeWZyRVU2RGlXMldJRERRTlJwN0d3a1h2R1V3ZzcxR0lMc3EifQ.hIdSY9qYBS16tHcWc2EBOATqh8MdsNhnTXuMNFmiiXE",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/service/availability-pricing-rule/list",
							"host": [
								"{{Url}}"
							],
							"path": [
								"service",
								"availability-pricing-rule",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "update pricing rule",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJhYmlzaGErYWRtaW5AYWdpbGVjeWJlcnNvbHV0aW9ucy5jb20iLCJ1c2VyX2lkIjoxMDEsInN1YnNjcmliZXJfaWQiOjEsImV4cCI6MTcxODI2MTIxOSwibGljZW5zZV9pZCI6MSwiYXBwX3VybCI6Imh0dHBzOi8vc3RhZ2luZy1ib29raW5nLmFnaWxlY3liZXIuY29tLyIsInVzZXJfZGJfY3JlZGVudGlhbCI6IlVlRUc2M3U5YmFWVUU1bFJyNHh5TTdNbktlS1I3ekpRTGFhb3RZTjE2YmhQY045M1NpRExpWmNoVklTdXZWR3krYVUzZVZ3cStIUktxMitRVSt0Q2J2ci9rVEF5cG5KRVp4YXVHY291Y09CeTlKWHZBeFAvZUFsK3N4bENPb1laIiwic2VydmljZV9kYl9jcmVkZW50aWFsIjoiMzZaQzVSa0lPMk5YazdDaFdFTU00WUxEYWxxdXRraS93MHlFUXl4cXVFeVRpUXZrZ3lhRy91dHhJaHVtMmpOK1FmNncwanZqZVVjTjFLRFJ1eE02RWZOMFBjS1h2aDdHazI0Z1NqYWg5WFpwK2NsMmFRYXVjTFlibEtlOWExSHciLCJib29raW5nX2RiX2NyZWRlbnRpYWwiOiJ2RGR5T2xmbWNwQUYxOUdCSTdHWncwWlNTSTI1TnNPRGtTR3l3djhPaDRXZWJpdSt1Mzg1bG14VlVROFBKUVpMMWZ6QS9lbGt5QjFiWG9MN05sSSs5bXFIRXd6SDRWZUZwamtJd01FYVhpVEhXM2RJMHFoZ0EwSnVHUVNGb0VrdiIsImNhbGVuZGFyX2RiX2NyZWRlbnRpYWwiOiIxL3RLRW5SZ250Q2lNQjdKKzk5VmFNc0txZWlmazdlRG85YTR0QitMY0JPajlKRHkxcUFDSXFjdTFad1Z4T000TFczUTYwdWNkUEM1VnpMV1lYNnBTSGUrWmxIYlJZTkVzL1JQa3oyamVWSGVaWGxyMENGa1dySGEyMU9CZ0VhcCIsImludm9pY2VfZGJfY3JlZGVudGlhbCI6IkVmRms5dDFKUWZLV3JSR2tvZnlUTVdpdkN5Yzh2T0tHTTR5Z0NqZXc0c212aEkzeTBIYkJ3V21QemtvRWEvR08vZVJiZDFOVDBYeTZTMU1Ca1ZGQ0VrUm45RUJJOUJXZkswSzh2VmVNWkdValo4NmI5enZuU253WVRGT0FpdnowIiwicGF5bWVudF9kYl9jcmVkZW50aWFsIjoia0ZPKzR1bzIrOXJLTDg2NGF0NTRTOHBGTkIvN25LcndRSkwxaDlodWxSWTU2dUNPTWQ0MVZOS3FETlRaSnF2UmtwbnBSdmJDelN6UlIxZ01CdmdEMGo1VUJvWHljeWZyRVU2RGlXMldJRERRTlJwN0d3a1h2R1V3ZzcxR0lMc3EifQ.hIdSY9qYBS16tHcWc2EBOATqh8MdsNhnTXuMNFmiiXE",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{pricing_rule_id}},\r\n    \"name\": \"{{pricing_rule_name}}\",\r\n    \"description\": \"\",\r\n    \"is_active\": 0,\r\n    \"priority\": 22,\r\n    \"stop_execution\": 0,\r\n    \"repeat_type\": \"Weekly\",\r\n    \"repeat_details\": {\r\n       \"weekly_days\": [1]\r\n        \r\n        },\r\n   \"start_date\": \"2024-07-06\",\r\n     \"end_date\":\"2025-07-10\",\r\n    \"tag_ids\": [\r\n        \r\n    ],\r\n    \"pricing_type\": \"Discount\",\r\n    \"slots\": [\r\n        {\r\n            \"id\": 1,\r\n            \"percentage\": 10,\r\n            \"is_available\": 1\r\n        }\r\n        \r\n    ],\r\n    \"proceed\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/service/availability-pricing-rule/edit",
							"host": [
								"{{Url}}"
							],
							"path": [
								"service",
								"availability-pricing-rule",
								"edit"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete pricing rule",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJhYmlzaGErYWRtaW5AYWdpbGVjeWJlcnNvbHV0aW9ucy5jb20iLCJ1c2VyX2lkIjoxMDEsInN1YnNjcmliZXJfaWQiOjEsImV4cCI6MTcxODI2MTIxOSwibGljZW5zZV9pZCI6MSwiYXBwX3VybCI6Imh0dHBzOi8vc3RhZ2luZy1ib29raW5nLmFnaWxlY3liZXIuY29tLyIsInVzZXJfZGJfY3JlZGVudGlhbCI6IlVlRUc2M3U5YmFWVUU1bFJyNHh5TTdNbktlS1I3ekpRTGFhb3RZTjE2YmhQY045M1NpRExpWmNoVklTdXZWR3krYVUzZVZ3cStIUktxMitRVSt0Q2J2ci9rVEF5cG5KRVp4YXVHY291Y09CeTlKWHZBeFAvZUFsK3N4bENPb1laIiwic2VydmljZV9kYl9jcmVkZW50aWFsIjoiMzZaQzVSa0lPMk5YazdDaFdFTU00WUxEYWxxdXRraS93MHlFUXl4cXVFeVRpUXZrZ3lhRy91dHhJaHVtMmpOK1FmNncwanZqZVVjTjFLRFJ1eE02RWZOMFBjS1h2aDdHazI0Z1NqYWg5WFpwK2NsMmFRYXVjTFlibEtlOWExSHciLCJib29raW5nX2RiX2NyZWRlbnRpYWwiOiJ2RGR5T2xmbWNwQUYxOUdCSTdHWncwWlNTSTI1TnNPRGtTR3l3djhPaDRXZWJpdSt1Mzg1bG14VlVROFBKUVpMMWZ6QS9lbGt5QjFiWG9MN05sSSs5bXFIRXd6SDRWZUZwamtJd01FYVhpVEhXM2RJMHFoZ0EwSnVHUVNGb0VrdiIsImNhbGVuZGFyX2RiX2NyZWRlbnRpYWwiOiIxL3RLRW5SZ250Q2lNQjdKKzk5VmFNc0txZWlmazdlRG85YTR0QitMY0JPajlKRHkxcUFDSXFjdTFad1Z4T000TFczUTYwdWNkUEM1VnpMV1lYNnBTSGUrWmxIYlJZTkVzL1JQa3oyamVWSGVaWGxyMENGa1dySGEyMU9CZ0VhcCIsImludm9pY2VfZGJfY3JlZGVudGlhbCI6IkVmRms5dDFKUWZLV3JSR2tvZnlUTVdpdkN5Yzh2T0tHTTR5Z0NqZXc0c212aEkzeTBIYkJ3V21QemtvRWEvR08vZVJiZDFOVDBYeTZTMU1Ca1ZGQ0VrUm45RUJJOUJXZkswSzh2VmVNWkdValo4NmI5enZuU253WVRGT0FpdnowIiwicGF5bWVudF9kYl9jcmVkZW50aWFsIjoia0ZPKzR1bzIrOXJLTDg2NGF0NTRTOHBGTkIvN25LcndRSkwxaDlodWxSWTU2dUNPTWQ0MVZOS3FETlRaSnF2UmtwbnBSdmJDelN6UlIxZ01CdmdEMGo1VUJvWHljeWZyRVU2RGlXMldJRERRTlJwN0d3a1h2R1V3ZzcxR0lMc3EifQ.hIdSY9qYBS16tHcWc2EBOATqh8MdsNhnTXuMNFmiiXE",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [{{pricing_rule_id}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/service/availability-pricing-rule/delete",
							"host": [
								"{{Url}}"
							],
							"path": [
								"service",
								"availability-pricing-rule",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Services",
			"item": [
				{
					"name": "form-structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/service/form-structure/fields/service",
							"host": [
								"{{Url}}"
							],
							"path": [
								"service",
								"form-structure",
								"fields",
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const petServices = [\r",
									"\"Canine Oasis\",\r",
									"\"Pawsitive Retreat\",\r",
									"\"Bark and Relax Spa\",\r",
									"\"Woof Wellness Center\",\r",
									"\"Tail Wag Therapy\",\r",
									"\"Furry Friends Fitness\",\r",
									"\"Snout Serenity\",\r",
									"\"Pawfection Playdates\",\r",
									"\"Happy Tails Retreat\",\r",
									"\"Whisker Wonderland\",\r",
									"\"Fido's Fun Zone\",\r",
									"\"Puppy Paradise\",\r",
									"\"Barkitecture Classes\",\r",
									"\"Tail-Wagging Adventures\",\r",
									"\"Purrfect Pampering Palace\",\r",
									"\"Bark n' Bite Bakery\",\r",
									"\"Paws & Harmony Yoga\",\r",
									"\"Wagging Tail Trails\",\r",
									"\"Zen Zzz's Pet Retreat\",\r",
									"\"Feline Fine Furs\",\r",
									"\"Canine Cuisine Catering\",\r",
									"\"Bow-Wow Ballroom\",\r",
									"\"Fetch n' Splash Aquatics\",\r",
									"\"Kitty Comfort Cove\",\r",
									"\"Waggle and Whisker Workshops\",\r",
									"\"Happy Hound Hangout\",\r",
									"\"Purr-fectly Polished Grooming\",\r",
									"\"Whisker Whisperer Sessions\",\r",
									"\"Pawsitively Chic Boutique\",\r",
									"\"Bark & Roll Music Sessions\",\r",
									"\"Feline Fiesta Feast\",\r",
									"\"Woof and Whisker Wine Bar\",\r",
									"\"Paws for Applause Performances\",\r",
									"\"Meow Mixology Classes\",\r",
									"\"Paws and Pints Pub\",\r",
									"\"Waggle and Whisker Workshops\",\r",
									"\"Fetch n' Splash Aquatics\",\r",
									"\"Happy Hound Hangout\",\r",
									"\"Pawsitively Chic Boutique\",\r",
									"\"Bark & Roll Music Sessions\",\r",
									"\"Feline Fiesta Feast\",\r",
									"\"Woof and Whisker Wine Bar\",\r",
									"\"Paws for Applause Performances\",\r",
									"\"Meow Mixology Classes\",\r",
									"\"Paws and Pints Pub\",\r",
									"\"Wagging Tail Trails\",\r",
									"\"Purrrfectly Plush Pet Retreat\",\r",
									"\"Bark-B-Q Doggy Dinners\",\r",
									"\"Purrfectly Polished Paws\",\r",
									"\"Waggle and Whisker Workshops\",\r",
									"\"Fetch n' Splash Aquatics\",\r",
									"\"Happy Hound Hangout\",\r",
									"\"Pawsitively Chic Boutique\",\r",
									"\"Bark & Roll Music Sessions\",\r",
									"\"Feline Fiesta Feast\",\r",
									"\"Woof and Whisker Wine Bar\",\r",
									"\"Paws for Applause Performances\",\r",
									"\"Meow Mixology Classes\",\r",
									"\"Paws and Pints Pub\",\r",
									"\"Wagging Tail Trails\"\r",
									"    // Add more services as needed\r",
									"];\r",
									"\r",
									"\r",
									"// Generate a random index\r",
									"const randomIndex = Math.floor(Math.random() * petServices.length);\r",
									"\r",
									"// Set the 'random_service_name' variable with the randomly selected service name\r",
									"pm.variables.set('random_service_name', petServices[randomIndex]);\r",
									"\r",
									"// Log the selected service name for verification (optional)\r",
									"console.log(\"Random Service Name:\", pm.variables.get('random_service_name'));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Generate a random base price between 10 and 1000 (adjust range as needed)\r",
									"const basePrice = Math.floor(Math.random() * (1000 - 10 + 1)) + 10;\r",
									"\r",
									"// Set the random base price as a global environment variable named \"base_price\"\r",
									"pm.globals.set(\"base_price\", basePrice);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const ServiceNamePart1 = [\"Pet Boarding\", \"Dog Walking\", \"Pet Sitting\", \"Veterinary Services\", \"Pet Grooming\"];\r",
									"const ServiceNamePart2 = [\"Training\", \"Daycare\", \"Transportation\", \"Photography\"];\r",
									"const ServiceNamePart3 = [\"Professional\", \"Elite\", \"Premium\", \"Specialized\", \"Customized\"];\r",
									"\r",
									"// Function to get a random service name\r",
									"function getRandomServiceName() {\r",
									"    const randomPart1Index = Math.floor(Math.random() * ServiceNamePart1.length);\r",
									"    const randomPart2Index = Math.floor(Math.random() * ServiceNamePart2.length);\r",
									"    const randomPart3Index = Math.floor(Math.random() * ServiceNamePart3.length);\r",
									"\r",
									"    const randomServiceName = `${ServiceNamePart1[randomPart1Index]} ${ServiceNamePart2[randomPart2Index]} ${ServiceNamePart3[randomPart3Index]}`;\r",
									"    return randomServiceName;\r",
									"}\r",
									"\r",
									"// Get a random service name\r",
									"const randomService = getRandomServiceName();\r",
									"\r",
									"// Set the random service name as a global environment variable\r",
									"pm.globals.set(\"random_service_name\", randomService);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Generate a random base price between 10 and 1000 (adjust range as needed)\r",
									"const basePrice = Math.floor(Math.random() * (1000 - 10 + 1)) + 10;\r",
									"\r",
									"// Set the random base price as a global environment variable named \"base_price\"\r",
									"pm.globals.set(\"base_price\", basePrice);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{random_service_name}}\",\r\n            \"description\": \"The pet services segment, including grooming, boarding, pet hotels, pet sitting, day care and other services, has been the fastest-growing\",\r\n            \"enable_repeat_booking\": 1,\r\n            \"auto_approval_threshold_limit\": 0,\r\n            \"booking_beyond_capacity\": 60,\r\n            \"beneficiary_subtype_id\": [\r\n                {{subtype_id}}\r\n            ],\r\n            \"service_visibility_id\": null,\r\n            \"beneficiary_age_limit_max\": {\r\n                \"year\": 5,\r\n                \"month\": 5\r\n            },\r\n            \"beneficiary_age_limit_min\": {\r\n                \"year\": 0,\r\n                \"month\": 5\r\n            },\r\n            \"advance_booking_requirement\": {\r\n                \"day\":0\r\n            },\r\n            \"maximum_allowed_date_for_booking\": {\r\n                \"day\":78\r\n            },\r\n            \"staff_handling_capacity\": 34,\r\n            \"capacity_per_slot\":20,\r\n            \"service_availability\": 1,\r\n            \"available_date_from\": \"02-02-2024\",\r\n            \"available_date_to\": \"24-12-2024\",\r\n            \"time_slots_id\": [\r\n                {{slot_id_list}}\r\n            ],\r\n            \"pricing_rule\": {},\r\n            \"pricing_rule_id\": [\r\n            ],\r\n              \"tiered_price\": [\r\n                {\r\n                    \"quantity\": 1,\r\n                    \"pricing\": 10\r\n                },\r\n                 {\r\n                    \"quantity\": 2,\r\n                    \"pricing\": 10\r\n                }\r\n              ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/service/form_submit",
							"host": [
								"{{Url}}"
							],
							"path": [
								"service",
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseJson.data.length > 0) {\r",
									"    postman.setEnvironmentVariable(\"Service_id\", responseJson.data[0]['id']);\r",
									"    postman.setEnvironmentVariable(\"Service_id1\", responseJson.data[3]['id']);\r",
									"    postman.setEnvironmentVariable(\"service_name\", responseJson.data[0]['name']);\r",
									"\r",
									"    var ids = responseJson.data.map(function (item) {\r",
									"        return item.id;\r",
									"    });\r",
									"\r",
									"    // Set the 'suptype_id' variable with the extracted IDs as a string (comma-separated)\r",
									"    postman.setEnvironmentVariable('service_id_list', ids.join(','));\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/list/service",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"list",
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// Generate a random base price between 10 and 1000 (adjust range as needed)\r",
									"const basePrice = Math.floor(Math.random() * (1000 - 10 + 1)) + 10;\r",
									"\r",
									"// Set the random base price as a global environment variable named \"base_price\"\r",
									"pm.globals.set(\"base_price\", basePrice);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": \"{{Service_id}}\",\r\n            \"name\": \"{{service_name}}\",\r\n            \"image\": null,\r\n            \"description\": \"The pet services segment, including grooming, boarding, pet hotels, pet sitting, day care and other services, has been the fastest-growing\",\r\n            \"base_price\": {{base_price}},\r\n            \"enable_repeat_booking\": 1,\r\n            \"auto_approval_threshold_limit\": 2,\r\n            \"booking_beyond_capacity\": 60,\r\n            \"beneficiary_subtype_id\": [{{subtype_id}}],\r\n            \"service_visibility_id\":[],\r\n            \"beneficiary_age_limit_max\": {\r\n                \"year\": 5,\r\n                \"month\": 5\r\n            },\r\n            \"beneficiary_age_limit_min\": {\r\n                \"year\": 0,\r\n                \"month\": 5\r\n            },\r\n            \"advance_booking_requirement\": {\r\n                \"day\":1\r\n            },\r\n            \"maximum_allowed_date_for_booking\": {\r\n                \"day\":78\r\n            },\r\n            \"staff_handling_capacity\": 34,\r\n            \"capacity_per_slot\":20,\r\n            \"service_availability\": 1,\r\n            \"available_date_from\": \"01-01-2024\",\r\n            \"available_date_to\": \"24-11-2025\",\r\n            \"time_slots_id\": [\r\n                {{slot_id_list}}\r\n            ],\r\n             \"pricing_rule\": {},\r\n            \"pricing_rule_id\": [\r\n            ],\r\n              \"tiered_price\": [\r\n                {\r\n                    \"quantity\": 1,\r\n                    \"pricing\": 10\r\n                },\r\n                 {\r\n                    \"quantity\": 2,\r\n                    \"pricing\": 10\r\n                }\r\n              ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/form_submit?form_id=1",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "list Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseJson.data.length > 0) {\r",
									"    postman.setEnvironmentVariable(\"Service_id\", responseJson.data[0]['id']);\r",
									"    postman.setEnvironmentVariable(\"Service_id1\", responseJson.data[3]['id']);\r",
									"    postman.setEnvironmentVariable(\"service_name\", responseJson.data[0]['name']);\r",
									"\r",
									"    var ids = responseJson.data.map(function (item) {\r",
									"        return item.id;\r",
									"    });\r",
									"\r",
									"    // Set the 'suptype_id' variable with the extracted IDs as a string (comma-separated)\r",
									"    postman.setEnvironmentVariable('service_id_list', ids.join(','));\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/list/service",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"list",
								"service"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "customer create- by admin",
			"item": [
				{
					"name": "form-structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form-structure/fields/user_management",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form-structure",
								"fields",
								"user_management"
							]
						}
					},
					"response": []
				},
				{
					"name": "create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of names\r",
									"const names = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// List of domain names\r",
									"const domains = [\"gmail.com\", \"agilecyber.com\", \"agilecybersolutions.com\"];\r",
									" \r",
									"// Function to generate a unique email with random 5-digit number\r",
									"function generateUniqueEmail() {\r",
									"    const randomIndexName = Math.floor(Math.random() * names.length);\r",
									"    const randomName = names[randomIndexName].toLowerCase();\r",
									"    \r",
									"    const randomIndexDomain = Math.floor(Math.random() * domains.length);\r",
									"    const randomDomain = domains[randomIndexDomain];\r",
									" \r",
									"    const uniqueIdentifier = Math.floor(10000 + Math.random() * 90000); // Generate random 5-digit number\r",
									" \r",
									"    return `${randomName}_${uniqueIdentifier}@${randomDomain}`;\r",
									"}\r",
									" \r",
									"// Set the unique email as a variable\r",
									"pm.variables.set(\"Admin-email\", generateUniqueEmail()); \r",
									"\r",
									"\r",
									"//Firstname\r",
									"// List of first names\r",
									"const firstNames = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomFirstName() {\r",
									"    const randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"    return firstNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"Admin-firstname\", getRandomFirstName()); \r",
									"\r",
									"\r",
									"const randomPostcodes = [\r",
									"    \"AB1 2CD\", \"EF3 4GH\", \"IJ5 6KL\", \"MN7 8OP\", \"QR9 0ST\", \"UV1 2WX\", \"YZ3 4AB\",\r",
									"    \"BC6 7DE\", \"GH8 9IJ\", \"KL0 1MN\", \"OP2 3QR\", \"ST4 5UV\", \"WX6 7YZ\", \"DE8 9FG\",\r",
									"    \"IJ0 1KL\", \"MN2 3OP\", \"QR4 5ST\", \"UV6 7WX\", \"YZ8 9AB\", \"FG0 1IJ\", \"KL3 4MN\",\r",
									"    \"OP5 6QR\", \"ST7 8UV\", \"WX9 0YZ\", \"AB2 3CD\", \"DE4 5FG\", \"IJ6 7KL\", \"MN8 9OP\",\r",
									"    \"QR1 2ST\", \"UV3 4WX\"\r",
									"];\r",
									" \r",
									"function getRandomPostal() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomPostcodes.length);\r",
									"    return randomPostcodes[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"postcode\", getRandomPostal()); \r",
									"\r",
									"\r",
									"\r",
									"function generateRandomName() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const nameLength = Math.floor(Math.random() * 10) + 5; // Generates a name with 5 to 14 characters\r",
									"  let randomName = '';\r",
									"\r",
									"  for (let i = 0; i < nameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    randomName += alphabet.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomName;\r",
									"}\r",
									"\r",
									"const randomName = generateRandomName();\r",
									"pm.globals.set(\"city\", randomName);\r",
									"\r",
									"\r",
									"\r",
									"const randomDigits = [\r",
									"    \"9876543210\", \"8765432109\", \"7654321098\", \"6543210987\", \"5432109876\", \"4321098765\", \"3210987654\"\r",
									"];\r",
									"\r",
									"// Function to generate a random set of 7 digits for the phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const randomDigit = Math.floor(Math.random() * randomDigits.length);\r",
									"    return randomDigits[randomDigit];\r",
									"}\r",
									"\r",
									"// Set the random UK phone number as a variable\r",
									"pm.variables.set(\"phone\", `44${getRandomPhoneNumber()}`);\r",
									"\r",
									"\r",
									"const randomHouseNames = [\r",
									"    \"Rose Cottage\", \"Oak View House\", \"Meadowcroft\", \"The Pines\", \"Riverside Manor\",\r",
									"    \"Elmwood Lodge\", \"Ivy Cottage\", \"Sunnyside Retreat\", \"Willow House\", \"Cedar Haven\",\r",
									"    \"Maple Mansion\", \"Sunset Villa\", \"Riverbank House\", \"Cherry Blossom Cottage\", \"Lakeside Lodge\",\r",
									"    \"Hilltop Haven\", \"Cedar Retreat\", \"Rosewood Residence\", \"Ivy Lane Cottage\", \"Forest View House\",\r",
									"    \"Alder Manor\", \"Beechwood House\", \"Juniper Retreat\", \"Magnolia Mansion\", \"Winding Way Cottage\",\r",
									"    \"Harbor View House\", \"Greenwood Cottage\", \"Silver Oak Residence\"\r",
									"];\r",
									"\r",
									"function getRandomHouse() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomHouseNames.length);\r",
									"    return randomHouseNames[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address\", getRandomHouse());\r",
									"\r",
									"// Random Address\r",
									"\r",
									"const randomStreets = [\r",
									"    \"High Street\", \"Main Street\", \"Park Avenue\", \"Maple Street\", \"Oak Avenue\",\r",
									"    \"Chestnut Lane\", \"Willow Road\", \"Pine Drive\", \"Elm Street\", \"Birch Lane\",\r",
									"    \"Meadow Lane\", \"Sunset Boulevard\", \"River Road\", \"Sycamore Avenue\", \"Cherry Lane\",\r",
									"    \"Lakeside Drive\", \"Hillcrest Avenue\", \"Cedar Street\", \"Rosewood Lane\", \"Ivy Lane\",\r",
									"    \"Forest Avenue\", \"Alder Road\", \"Beech Street\", \"Juniper Lane\", \"Magnolia Drive\",\r",
									"    \"Winding Way\", \"Harbor View\", \"Greenwood Avenue\", \"Silver Oak Lane\"\r",
									"];\r",
									"\r",
									"function getRandomStreet() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomStreets.length);\r",
									"    return randomStreets[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address1\", getRandomStreet()); \r",
									"\r",
									"\r",
									"const randomCities = [\r",
									"    \"London\", \"Manchester\", \"Birmingham\", \"Edinburgh\", \"Glasgow\", \"Liverpool\",\r",
									"    \"Bristol\", \"Belfast\", \"Cardiff\", \"Leeds\", \"Sheffield\", \"Newcastle upon Tyne\",\r",
									"    \"Nottingham\", \"Southampton\", \"Oxford\", \"Cambridge\", \"York\", \"Bath\", \"Aberdeen\",\r",
									"    \"Brighton\", \"Inverness\", \"Exeter\", \"Dundee\", \"Chester\", \"Stirling\", \"Portsmouth\"\r",
									"];\r",
									"\r",
									"function getRandomCity() {\r",
									"   const randomCityIndex = Math.floor(Math.random() * randomCities.length);\r",
									"   return randomCities[randomCityIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"City\", getRandomCity());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 12,\r\n    \"data\": [\r\n        {\r\n            \"profile_image\": null,\r\n            \"first_name\": \"{{Admin-firstname}}\",\r\n            \"last_name\": \"user\",\r\n            \"email\": \"{{Admin-email}}\",\r\n            \"phone_number\": \"{{phone}}\",\r\n            \"address_1\": \"{{address}}\",\r\n            \"address_2\": \"{{address1}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"country_id\": 1,\r\n            \"post_code\": \"{{postcode}}\",\r\n            \"payment_method_id\": 5,\r\n            \"invoice_frequency_id\": {{invoice_id}},\r\n            \"status\": null,\r\n            \"user_tags_id\":[]\r\n            \r\n            \r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"Admin_ID\", responseJson.data[0]['id']);\r",
									"postman.setEnvironmentVariable(\"customer_id1\", responseJson.data[1]['id']);\r",
									"postman.setEnvironmentVariable(\"Admin-mail\", responseJson.data[0]['email']);\r",
									"postman.setEnvironmentVariable(\"Admin_ID1\", responseJson.data[5]['id']);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/list/user_management",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"user_management"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of names\r",
									"const names = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// List of domain names\r",
									"const domains = [\"gmail.com\", \"agilecyber.com\", \"agilecybersolutions.com\"];\r",
									" \r",
									"// Function to generate a unique email with random 5-digit number\r",
									"function generateUniqueEmail() {\r",
									"    const randomIndexName = Math.floor(Math.random() * names.length);\r",
									"    const randomName = names[randomIndexName].toLowerCase();\r",
									"    \r",
									"    const randomIndexDomain = Math.floor(Math.random() * domains.length);\r",
									"    const randomDomain = domains[randomIndexDomain];\r",
									" \r",
									"    const uniqueIdentifier = Math.floor(10000 + Math.random() * 90000); // Generate random 5-digit number\r",
									" \r",
									"    return `${randomName}_${uniqueIdentifier}@${randomDomain}`;\r",
									"}\r",
									" \r",
									"// Set the unique email as a variable\r",
									"pm.variables.set(\"Admin-email\", generateUniqueEmail()); \r",
									"\r",
									"\r",
									"//Firstname\r",
									"// List of first names\r",
									"const firstNames = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomFirstName() {\r",
									"    const randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"    return firstNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"Admin-firstname\", getRandomFirstName()); \r",
									"\r",
									"\r",
									"const randomPostcodes = [\r",
									"    \"AB1 2CD\", \"EF3 4GH\", \"IJ5 6KL\", \"MN7 8OP\", \"QR9 0ST\", \"UV1 2WX\", \"YZ3 4AB\",\r",
									"    \"BC6 7DE\", \"GH8 9IJ\", \"KL0 1MN\", \"OP2 3QR\", \"ST4 5UV\", \"WX6 7YZ\", \"DE8 9FG\",\r",
									"    \"IJ0 1KL\", \"MN2 3OP\", \"QR4 5ST\", \"UV6 7WX\", \"YZ8 9AB\", \"FG0 1IJ\", \"KL3 4MN\",\r",
									"    \"OP5 6QR\", \"ST7 8UV\", \"WX9 0YZ\", \"AB2 3CD\", \"DE4 5FG\", \"IJ6 7KL\", \"MN8 9OP\",\r",
									"    \"QR1 2ST\", \"UV3 4WX\"\r",
									"];\r",
									" \r",
									"function getRandomPostal() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomPostcodes.length);\r",
									"    return randomPostcodes[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"postcode\", getRandomPostal()); \r",
									"\r",
									"\r",
									"\r",
									"function generateRandomName() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const nameLength = Math.floor(Math.random() * 10) + 5; // Generates a name with 5 to 14 characters\r",
									"  let randomName = '';\r",
									"\r",
									"  for (let i = 0; i < nameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    randomName += alphabet.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomName;\r",
									"}\r",
									"\r",
									"const randomName = generateRandomName();\r",
									"pm.globals.set(\"city\", randomName);\r",
									"\r",
									"\r",
									"\r",
									"const randomDigits = [\r",
									"    \"9876543210\", \"8765432109\", \"7654321098\", \"6543210987\", \"5432109876\", \"4321098765\", \"3210987654\"\r",
									"];\r",
									"\r",
									"// Function to generate a random set of 7 digits for the phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const randomDigit = Math.floor(Math.random() * randomDigits.length);\r",
									"    return randomDigits[randomDigit];\r",
									"}\r",
									"\r",
									"// Set the random UK phone number as a variable\r",
									"pm.variables.set(\"phone\", `44${getRandomPhoneNumber()}`);\r",
									"\r",
									"\r",
									"const randomHouseNames = [\r",
									"    \"Rose Cottage\", \"Oak View House\", \"Meadowcroft\", \"The Pines\", \"Riverside Manor\",\r",
									"    \"Elmwood Lodge\", \"Ivy Cottage\", \"Sunnyside Retreat\", \"Willow House\", \"Cedar Haven\",\r",
									"    \"Maple Mansion\", \"Sunset Villa\", \"Riverbank House\", \"Cherry Blossom Cottage\", \"Lakeside Lodge\",\r",
									"    \"Hilltop Haven\", \"Cedar Retreat\", \"Rosewood Residence\", \"Ivy Lane Cottage\", \"Forest View House\",\r",
									"    \"Alder Manor\", \"Beechwood House\", \"Juniper Retreat\", \"Magnolia Mansion\", \"Winding Way Cottage\",\r",
									"    \"Harbor View House\", \"Greenwood Cottage\", \"Silver Oak Residence\"\r",
									"];\r",
									"\r",
									"function getRandomHouse() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomHouseNames.length);\r",
									"    return randomHouseNames[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address\", getRandomHouse());\r",
									"\r",
									"// Random Address\r",
									"\r",
									"const randomStreets = [\r",
									"    \"High Street\", \"Main Street\", \"Park Avenue\", \"Maple Street\", \"Oak Avenue\",\r",
									"    \"Chestnut Lane\", \"Willow Road\", \"Pine Drive\", \"Elm Street\", \"Birch Lane\",\r",
									"    \"Meadow Lane\", \"Sunset Boulevard\", \"River Road\", \"Sycamore Avenue\", \"Cherry Lane\",\r",
									"    \"Lakeside Drive\", \"Hillcrest Avenue\", \"Cedar Street\", \"Rosewood Lane\", \"Ivy Lane\",\r",
									"    \"Forest Avenue\", \"Alder Road\", \"Beech Street\", \"Juniper Lane\", \"Magnolia Drive\",\r",
									"    \"Winding Way\", \"Harbor View\", \"Greenwood Avenue\", \"Silver Oak Lane\"\r",
									"];\r",
									"\r",
									"function getRandomStreet() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomStreets.length);\r",
									"    return randomStreets[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address1\", getRandomStreet()); \r",
									"\r",
									"\r",
									"const randomCities = [\r",
									"    \"London\", \"Manchester\", \"Birmingham\", \"Edinburgh\", \"Glasgow\", \"Liverpool\",\r",
									"    \"Bristol\", \"Belfast\", \"Cardiff\", \"Leeds\", \"Sheffield\", \"Newcastle upon Tyne\",\r",
									"    \"Nottingham\", \"Southampton\", \"Oxford\", \"Cambridge\", \"York\", \"Bath\", \"Aberdeen\",\r",
									"    \"Brighton\", \"Inverness\", \"Exeter\", \"Dundee\", \"Chester\", \"Stirling\", \"Portsmouth\"\r",
									"];\r",
									"\r",
									"function getRandomCity() {\r",
									"   const randomCityIndex = Math.floor(Math.random() * randomCities.length);\r",
									"   return randomCities[randomCityIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"City\", getRandomCity());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Admin_ID}},\r\n            \"profile_image\": null,\r\n            \"first_name\": \"{{Admin-firstname}}\",\r\n            \"last_name\": \"customer\",\r\n            \"email\": \"{{Admin-email}}\",\r\n            \"phone_number\": \"{{phone}}\",\r\n            \"address_1\": \"{{address}}\",\r\n            \"address_2\": \"{{address1}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"country_id\": 1,\r\n            \"post_code\": \"{{postcode}}\",\r\n            \"payment_method_id\":{{payment_id}},\r\n            \"invoice_frequency_id\": null,\r\n            \"status\": 1,\r\n            \"user_tags_id\":[]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=12",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "12"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin Beneficiary",
			"item": [
				{
					"name": "structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/form-structure/fields/beneficiary",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form-structure",
								"fields",
								"beneficiary"
							]
						}
					},
					"response": []
				},
				{
					"name": "form_submit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random UUID (v4)\r",
									"function generateUUID() {\r",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"        var r = Math.random() * 16 | 0,\r",
									"            v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"        return v.toString(16);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Set the generated UUID as an environment variable\r",
									"pm.environment.set(\"random_uuid\", generateUUID());\r",
									"\r",
									"const petNames = [\r",
									"    \"Max\", \"Bella\", \"Charlie\", \"Luna\", \"Cooper\", \"Daisy\", \"Buddy\", \"Lucy\", \"Rocky\", \"Molly\",\r",
									"    \"Bailey\", \"Sadie\", \"Toby\", \"Chloe\", \"Jack\", \"Sophie\", \"Duke\", \"Rosie\", \"Riley\", \"Zoe\"\r",
									"];\r",
									"\r",
									"// Function to get a random pet name\r",
									"function getRandomPetName() {\r",
									"    const randomIndex = Math.floor(Math.random() * petNames.length);\r",
									"    return petNames[randomIndex];\r",
									"}\r",
									"\r",
									"// Set the random pet name as an environment variable\r",
									"pm.environment.set(\"random_pet_name\", getRandomPetName());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 3,\r\n    \"data\": [\r\n        {\r\n            \"parent_id\":{{user_id_1}},\r\n            \"uuid\": \"{{random_uuid}}\",\r\n            \"first_name\": \"{{random_pet_name}}\",\r\n            \"profile_image\": null,\r\n            \"parent_uuid\": \"{{random_uuid}}\",\r\n            \"dob\": \"2022/02/12\",\r\n            \"notes\":null,\r\n            \"gender_id\": 1,\r\n            \"size\": \"Medium (7 - 18Kg)\",\r\n            \"subtype_id\": [\r\n                {{beneficiary_subtype_ID}}\r\n            ],\r\n            \"behaviour_id\": [\r\n                1,\r\n                2,\r\n                3\r\n            ],\r\n            \"dietary_issues\": \"No issues.\",\r\n            \"allergies\": \"Skin allergy\",\r\n            \"vet_name\": \"Priya\",\r\n            \"vet_address\": \"12, Pine house\",\r\n            \"vet_phone\": 442012345678,\r\n            \"microchip_id\": 985112008055825,\r\n            \"emergency_contact_name\": \"Daniel\",\r\n            \"emergency_contact_phone\": 442012345678,\r\n            \"special_instructions\": \"Do exercise.\",\r\n            \"feeding_schedules\": \"Once in 2 hours\",\r\n            \"additional_contacts\": 4426382597,\r\n            \"medical_records\": \"No medical records.\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"Admin_beneficiary_ID\", responseJson.data[0]['id']);\r",
									"postman.setEnvironmentVariable(\"beneficiary_ID2\", responseJson.data[1]['id']);\r",
									"postman.setEnvironmentVariable(\"Admin_parent_ID\", responseJson.data[0]['parent_id']);\r",
									"postman.setEnvironmentVariable(\"Admin_update_uuid\", responseJson.data[0]['uuid']);\r",
									"postman.setEnvironmentVariable(\"Admin_update_parent_uuid\", responseJson.data[0]['parent_uuid']);\r",
									"// postman.setEnvironmentVariable(\"beneficiary_ID1\", responseJson.data[12]['id']);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/list/beneficiary?parent_id={{user_id_1}}",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"beneficiary"
							],
							"query": [
								{
									"key": "parent_id",
									"value": "{{user_id_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random UUID (v4)\r",
									"function generateUUID() {\r",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"        var r = Math.random() * 16 | 0,\r",
									"            v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"        return v.toString(16);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Set the generated UUID as an environment variable\r",
									"pm.environment.set(\"Admin_random_uuid\", generateUUID());\r",
									"\r",
									"const petNames = [\r",
									"    \"Max\", \"Bella\", \"Charlie\", \"Luna\", \"Cooper\", \"Daisy\", \"Buddy\", \"Lucy\", \"Rocky\", \"Molly\",\r",
									"    \"Bailey\", \"Sadie\", \"Toby\", \"Chloe\", \"Jack\", \"Sophie\", \"Duke\", \"Rosie\", \"Riley\", \"Zoe\"\r",
									"];\r",
									"\r",
									"// Function to get a random pet name\r",
									"function getRandomPetName() {\r",
									"    const randomIndex = Math.floor(Math.random() * petNames.length);\r",
									"    return petNames[randomIndex];\r",
									"}\r",
									"\r",
									"// Set the random pet name as an environment variable\r",
									"pm.environment.set(\"Admin_random_pet_name\", getRandomPetName());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 3,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"id\":{{Admin_beneficiary_ID}},\r\n            \"parent_id\":{{user_id_1}},\r\n            \"uuid\": \"{{Admin_update_uuid}}\",\r\n            \"first_name\": \"{{Admin_random_pet_name}}\",\r\n            \"profile_image\": null,\r\n            \"parent_uuid\": \"{{Admin_update_parent_uuid}}\",\r\n              \"dob\": \"2021-03-12\",\r\n            \"gender_id\": 1,\r\n            \"size\": \"Medium (7 - 18Kg)\",\r\n            \"subtype_id\": [\r\n                {{beneficiary_subtype_ID}}\r\n            ],\r\n            \"behaviour_id\": [\r\n                1,\r\n                2,\r\n                3\r\n            ],\r\n            \"notes\":null,\r\n            \"dietary_issues\": \"No issues.\",\r\n            \"allergies\": \"Skin allergy\",\r\n            \"vet_name\": \"Priya\",\r\n            \"vet_address\": \"12, Pine house\",\r\n            \"vet_phone\": 442012345678,\r\n            \"microchip_id\": 985112008055825,\r\n            \"emergency_contact_name\": \"Daniel\",\r\n            \"emergency_contact_phone\": 442012345678,\r\n            \"special_instructions\": \"Do exercise.\",\r\n            \"feeding_schedules\": \"Once in 2 hours\",\r\n            \"additional_contacts\": 4426382597,\r\n            \"medical_records\": \"No medical records.\"\r\n           \r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=3",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User details",
			"item": [
				{
					"name": "Form Structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{signup_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/form-structure/fields/user",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form-structure",
								"fields",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"user_ID\", responseJson.data[0]['id']);\r",
									"postman.setEnvironmentVariable(\"user_ID_delete\", responseJson.data[1]['id']);\r",
									"postman.setEnvironmentVariable(\"e-mail\", responseJson.data[0]['email']);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/user",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of names\r",
									"const names = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// List of domain names\r",
									"const domains = [\"gmail.com\", \"agilecyber.com\", \"agilecybersolutions.com\"];\r",
									" \r",
									"// Function to generate a unique email with random 5-digit number\r",
									"function generateUniqueEmail() {\r",
									"    const randomIndexName = Math.floor(Math.random() * names.length);\r",
									"    const randomName = names[randomIndexName].toLowerCase();\r",
									"    \r",
									"    const randomIndexDomain = Math.floor(Math.random() * domains.length);\r",
									"    const randomDomain = domains[randomIndexDomain];\r",
									" \r",
									"    const uniqueIdentifier = Math.floor(10000 + Math.random() * 90000); // Generate random 5-digit number\r",
									" \r",
									"    return `${randomName}_${uniqueIdentifier}@${randomDomain}`;\r",
									"}\r",
									" \r",
									"// Set the unique email as a variable\r",
									"pm.variables.set(\"User-email\", generateUniqueEmail()); \r",
									"\r",
									"\r",
									"//Firstname\r",
									"// List of first names\r",
									"const firstNames = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomFirstName() {\r",
									"    const randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"    return firstNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"User-firstname\", getRandomFirstName()); \r",
									"\r",
									"\r",
									"const randomPostcodes = [\r",
									"    \"AB1 2CD\", \"EF3 4GH\", \"IJ5 6KL\", \"MN7 8OP\", \"QR9 0ST\", \"UV1 2WX\", \"YZ3 4AB\",\r",
									"    \"BC6 7DE\", \"GH8 9IJ\", \"KL0 1MN\", \"OP2 3QR\", \"ST4 5UV\", \"WX6 7YZ\", \"DE8 9FG\",\r",
									"    \"IJ0 1KL\", \"MN2 3OP\", \"QR4 5ST\", \"UV6 7WX\", \"YZ8 9AB\", \"FG0 1IJ\", \"KL3 4MN\",\r",
									"    \"OP5 6QR\", \"ST7 8UV\", \"WX9 0YZ\", \"AB2 3CD\", \"DE4 5FG\", \"IJ6 7KL\", \"MN8 9OP\",\r",
									"    \"QR1 2ST\", \"UV3 4WX\"\r",
									"];\r",
									" \r",
									"function getRandomPostal() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomPostcodes.length);\r",
									"    return randomPostcodes[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"postcode\", getRandomPostal()); \r",
									"\r",
									"\r",
									"\r",
									"function generateRandomName() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const nameLength = Math.floor(Math.random() * 10) + 5; // Generates a name with 5 to 14 characters\r",
									"  let randomName = '';\r",
									"\r",
									"  for (let i = 0; i < nameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    randomName += alphabet.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomName;\r",
									"}\r",
									"\r",
									"const randomName = generateRandomName();\r",
									"pm.globals.set(\"city\", randomName);\r",
									"\r",
									"\r",
									"\r",
									"const randomDigits = [\r",
									"    \"9876543210\", \"8765432109\", \"7654321098\", \"6543210987\", \"5432109876\", \"4321098765\", \"3210987654\"\r",
									"];\r",
									"\r",
									"// Function to generate a random set of 7 digits for the phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const randomDigit = Math.floor(Math.random() * randomDigits.length);\r",
									"    return randomDigits[randomDigit];\r",
									"}\r",
									"\r",
									"// Set the random UK phone number as a variable\r",
									"pm.variables.set(\"phone\", `44${getRandomPhoneNumber()}`);\r",
									"\r",
									"\r",
									"const randomHouseNames = [\r",
									"    \"Rose Cottage\", \"Oak View House\", \"Meadowcroft\", \"The Pines\", \"Riverside Manor\",\r",
									"    \"Elmwood Lodge\", \"Ivy Cottage\", \"Sunnyside Retreat\", \"Willow House\", \"Cedar Haven\",\r",
									"    \"Maple Mansion\", \"Sunset Villa\", \"Riverbank House\", \"Cherry Blossom Cottage\", \"Lakeside Lodge\",\r",
									"    \"Hilltop Haven\", \"Cedar Retreat\", \"Rosewood Residence\", \"Ivy Lane Cottage\", \"Forest View House\",\r",
									"    \"Alder Manor\", \"Beechwood House\", \"Juniper Retreat\", \"Magnolia Mansion\", \"Winding Way Cottage\",\r",
									"    \"Harbor View House\", \"Greenwood Cottage\", \"Silver Oak Residence\"\r",
									"];\r",
									"\r",
									"function getRandomHouse() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomHouseNames.length);\r",
									"    return randomHouseNames[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address\", getRandomHouse());\r",
									"\r",
									"// Random Address\r",
									"\r",
									"const randomStreets = [\r",
									"    \"High Street\", \"Main Street\", \"Park Avenue\", \"Maple Street\", \"Oak Avenue\",\r",
									"    \"Chestnut Lane\", \"Willow Road\", \"Pine Drive\", \"Elm Street\", \"Birch Lane\",\r",
									"    \"Meadow Lane\", \"Sunset Boulevard\", \"River Road\", \"Sycamore Avenue\", \"Cherry Lane\",\r",
									"    \"Lakeside Drive\", \"Hillcrest Avenue\", \"Cedar Street\", \"Rosewood Lane\", \"Ivy Lane\",\r",
									"    \"Forest Avenue\", \"Alder Road\", \"Beech Street\", \"Juniper Lane\", \"Magnolia Drive\",\r",
									"    \"Winding Way\", \"Harbor View\", \"Greenwood Avenue\", \"Silver Oak Lane\"\r",
									"];\r",
									"\r",
									"function getRandomStreet() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomStreets.length);\r",
									"    return randomStreets[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address1\", getRandomStreet()); \r",
									"\r",
									"\r",
									"const randomCities = [\r",
									"    \"London\", \"Manchester\", \"Birmingham\", \"Edinburgh\", \"Glasgow\", \"Liverpool\",\r",
									"    \"Bristol\", \"Belfast\", \"Cardiff\", \"Leeds\", \"Sheffield\", \"Newcastle upon Tyne\",\r",
									"    \"Nottingham\", \"Southampton\", \"Oxford\", \"Cambridge\", \"York\", \"Bath\", \"Aberdeen\",\r",
									"    \"Brighton\", \"Inverness\", \"Exeter\", \"Dundee\", \"Chester\", \"Stirling\", \"Portsmouth\"\r",
									"];\r",
									"\r",
									"function getRandomCity() {\r",
									"   const randomCityIndex = Math.floor(Math.random() * randomCities.length);\r",
									"   return randomCities[randomCityIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"City\", getRandomCity());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{signup_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{user-reject-id}},\r\n            \"profile_image\": null,\r\n            \"email\": \"{{signup-user}}\",\r\n            \"first_name\": \"{{User-firstname}}\",\r\n            \"last_name\": \"customer\",\r\n            \"country_id\": 1,\r\n            \"phone_number\": \"{{phone}}\",\r\n            \"address_1\": \"{{address}}\",\r\n            \"address_2\": \"{{address1}}\",\r\n            \"city\": \"{{City}}\",\r\n            \"post_code\": \"{{postcode}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=1",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random UUID (v4)\r",
									"function generateUUID() {\r",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"        var r = Math.random() * 16 | 0,\r",
									"            v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"        return v.toString(16);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Set the generated UUID as an environment variable\r",
									"pm.environment.set(\"random_uuid\", generateUUID());\r",
									"\r",
									"const petNames = [\r",
									"    \"Max\", \"Bella\", \"Charlie\", \"Luna\", \"Cooper\", \"Daisy\", \"Buddy\", \"Lucy\", \"Rocky\", \"Molly\",\r",
									"    \"Bailey\", \"Sadie\", \"Toby\", \"Chloe\", \"Jack\", \"Sophie\", \"Duke\", \"Rosie\", \"Riley\", \"Zoe\"\r",
									"];\r",
									"\r",
									"// Function to get a random pet name\r",
									"function getRandomPetName() {\r",
									"    const randomIndex = Math.floor(Math.random() * petNames.length);\r",
									"    return petNames[randomIndex];\r",
									"}\r",
									"\r",
									"// Set the random pet name as an environment variable\r",
									"pm.environment.set(\"random_pet_name\", getRandomPetName());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 6,\r\n    \"data\": [\r\n        {\r\n            \"parent_id\":{{user-reject-id}},\r\n            \"uuid\": \"{{random_uuid}}\",\r\n            \"first_name\": \"{{random_pet_name}}\",\r\n            \"profile_image\": null,\r\n            \"parent_uuid\": \"{{random_uuid}}\",\r\n            \"dob\": \"2022/02/12\",\r\n            \"gender_id\": 1,\r\n            \"size\": \"Medium (7 - 18Kg)\",\r\n            \"subtype_id\": [\r\n                {{beneficiary_subtype_ID}}\r\n            ],\r\n            \"behaviour_id\": [\r\n                1,\r\n                2,\r\n                3\r\n            ],\r\n            \"dietary_issues\": \"No issues.\",\r\n            \"allergies\": \"Skin allergy\",\r\n            \"vet_name\": \"Priya\",\r\n            \"vet_address\": \"12, Pine house\",\r\n            \"vet_phone\": 442012345678,\r\n            \"microchip_id\": 985112008055825,\r\n            \"emergency_contact_name\": \"Daniel\",\r\n            \"emergency_contact_phone\": 442012345678,\r\n            \"special_instructions\": \"Do exercise.\",\r\n            \"feeding_schedules\": \"Once in 2 hours\",\r\n            \"additional_contacts\": 4426382597,\r\n            \"medical_records\": \"No medical records.\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin user Approve",
			"item": [
				{
					"name": "unapproved list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"user_id\", responseJson.data[0]['id']);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/unapprove",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"unapprove"
							]
						}
					},
					"response": []
				},
				{
					"name": "user approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":{{user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/role/approve",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"role",
								"approve"
							]
						}
					},
					"response": []
				},
				{
					"name": "unapproved list pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"user_id\", responseJson.data[0]['id']);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/list/beneficiary/unapprove",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"beneficiary",
								"unapprove"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Beneficiary",
			"item": [
				{
					"name": "structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/user/form-structure/fields/my_beneficiary",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"form-structure",
								"fields",
								"my_beneficiary"
							]
						}
					},
					"response": []
				},
				{
					"name": "form_submit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random UUID (v4)\r",
									"function generateUUID() {\r",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"        var r = Math.random() * 16 | 0,\r",
									"            v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"        return v.toString(16);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Set the generated UUID as an environment variable\r",
									"pm.environment.set(\"random_uuid\", generateUUID());\r",
									"\r",
									"const petNames = [\r",
									"    \"Max\", \"Bella\", \"Charlie\", \"Luna\", \"Cooper\", \"Daisy\", \"Buddy\", \"Lucy\", \"Rocky\", \"Molly\",\r",
									"    \"Bailey\", \"Sadie\", \"Toby\", \"Chloe\", \"Jack\", \"Sophie\", \"Duke\", \"Rosie\", \"Riley\", \"Zoe\"\r",
									"];\r",
									"\r",
									"// Function to get a random pet name\r",
									"function getRandomPetName() {\r",
									"    const randomIndex = Math.floor(Math.random() * petNames.length);\r",
									"    return petNames[randomIndex];\r",
									"}\r",
									"\r",
									"// Set the random pet name as an environment variable\r",
									"pm.environment.set(\"random_pet_name\", getRandomPetName());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 6,\r\n    \"data\": [\r\n        {\r\n            \"parent_id\":{{user_id_1}},\r\n            \"uuid\": \"{{random_uuid}}\",\r\n            \"first_name\": \"{{random_pet_name}}\",\r\n            \"profile_image\": null,\r\n            \"parent_uuid\": \"{{random_uuid}}\",\r\n            \"dob\": \"2021-03-12\",\r\n            \"gender_id\": 1,\r\n            \"size\": \"Medium (7 - 18Kg)\",\r\n            \"subtype_id\": [\r\n                {{beneficiary_subtype_ID}}\r\n            ],\r\n            \"behaviour_id\": [\r\n                1,\r\n                2,\r\n                3\r\n            ],\r\n            \"dietary_issues\": \"No issues.\",\r\n            \"allergies\": \"Skin allergy\",\r\n            \"vet_name\": \"Priya\",\r\n            \"vet_address\": \"12, Pine house\",\r\n            \"vet_phone\": 442012345678,\r\n            \"microchip_id\": 985112008055825,\r\n            \"emergency_contact_name\": \"Daniel\",\r\n            \"emergency_contact_phone\": 442012345678,\r\n            \"special_instructions\": \"Do exercise.\",\r\n            \"feeding_schedules\": \"Once in 2 hours\",\r\n            \"additional_contacts\": 4426382597,\r\n            \"medical_records\": \"No medical records.\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"approve_beneficiary\", responseJson.data[0]['id']);\r",
									"\r",
									"var beneficiaryData = responseJson.data[0];\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"beneficiary_ID\", beneficiaryData['id']);\r",
									"postman.setEnvironmentVariable(\"parent_ID\", beneficiaryData['parent_id']);\r",
									"postman.setEnvironmentVariable(\"update_uuid\", beneficiaryData['uuid']);\r",
									"postman.setEnvironmentVariable(\"update_parent_uuid\", beneficiaryData['parent_uuid']);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(responseJson.data).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(beneficiaryData).to.have.property('id');\r",
									"    pm.expect(responseJson.data[2]).to.have.property('id');\r",
									"    pm.expect(beneficiaryData).to.have.property('parent_id');\r",
									"    pm.expect(beneficiaryData).to.have.property('uuid');\r",
									"    pm.expect(beneficiaryData).to.have.property('parent_uuid');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/list/my_beneficiary",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"list",
								"my_beneficiary"
							]
						}
					},
					"response": []
				},
				{
					"name": "pet approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"approved\",\r\n    \"beneficiary_id\":{{approve_beneficiary}},\r\n    \"notes\": \"Thank You for your request\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/beneficiary/status_update",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"beneficiary",
								"status_update"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"id\": {{beneficiary_ID}},\r\n            \"parent_id\": {{parent_ID}},\r\n            \"uuid\": \"{{update_uuid}}\",\r\n            \"first_name\": \"{{random_pet_name}}\",\r\n            \"profile_image\": null,\r\n            \"parent_uuid\": \"{{update_parent_uuid}}\",\r\n            \"dob\": \"2021-03-12\",\r\n            \"gender_id\": 1,\r\n            \"size\": \"Medium (7 - 18Kg)\",\r\n            \"subtype_id\": [\r\n                {{beneficiary_subtype_ID}}\r\n            ],\r\n            \"behaviour_id\": [\r\n                1,\r\n                2,\r\n                3\r\n            ],\r\n            \"dietary_issues\": \"No issues.\",\r\n            \"allergies\": \"Skin allergy\",\r\n            \"vet_name\": \"Priya\",\r\n            \"vet_address\": \"12, Pine house\",\r\n            \"vet_phone\": 442012345678,\r\n            \"microchip_id\": 985112008055825,\r\n            \"emergency_contact_name\": \"Daniel\",\r\n            \"emergency_contact_phone\": 442012345678,\r\n            \"special_instructions\": \"Do exercise.\",\r\n            \"feeding_schedules\": \"Once in 2 hours\",\r\n            \"additional_contacts\": 4426382597,\r\n            \"medical_records\": \"No medical records.\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit?form_id=6",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "6"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Staff details",
			"item": [
				{
					"name": "form-structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}calendar/form-structure/fields/staff",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"form-structure",
								"fields",
								"staff"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Staff",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of names\r",
									"const names = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// List of domain names\r",
									"const domains = [\"gmail.com\", \"agilecyber.com\", \"agilecybersolutions.com\"];\r",
									" \r",
									"// Function to generate a unique email with random 5-digit number\r",
									"function generateUniqueEmail() {\r",
									"    const randomIndexName = Math.floor(Math.random() * names.length);\r",
									"    const randomName = names[randomIndexName].toLowerCase();\r",
									"    \r",
									"    const randomIndexDomain = Math.floor(Math.random() * domains.length);\r",
									"    const randomDomain = domains[randomIndexDomain];\r",
									" \r",
									"    const uniqueIdentifier = Math.floor(10000 + Math.random() * 90000); // Generate random 5-digit number\r",
									" \r",
									"    return `${randomName}_${uniqueIdentifier}@${randomDomain}`;\r",
									"}\r",
									" \r",
									"// Set the unique email as a variable\r",
									"pm.variables.set(\"Staff-email\", generateUniqueEmail());\r",
									" \r",
									" \r",
									"//Firstname\r",
									"// List of first names\r",
									"const firstNames = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomFirstName() {\r",
									"    const randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"    return firstNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"Staff-name\", getRandomFirstName());\r",
									" \r",
									"//Lastname\r",
									"// List of last names\r",
									"const lastNames = [\r",
									"    \"Jones\", \"Williams\", \"Taylor\", \"Brown\",\r",
									"    \"Davies\", \"Evans\", \"Patel\", \"Wilson\", \"Johnson\",\r",
									"    \"Singh\", \"Wright\", \"Robinson\", \"Thompson\", \"White\",\r",
									"    \"Walker\", \"Hall\", \"Green\"\r",
									"];\r",
									" \r",
									"// Function to get a random last name\r",
									"function getRandomLastName() {\r",
									"    const randomIndex = Math.floor(Math.random() * lastNames.length);\r",
									"    return lastNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random last name as a variable\r",
									"pm.variables.set(\"Staff-lname\", getRandomLastName());\r",
									"\r",
									"\r",
									"const randomPostcodes = [\r",
									"   \"AB3 3CD\", \"EF2 5GH\", \"IJ5 7KL\", \"MN5 9OP\", \"QR5 2ST\", \"UV5 4WX\", \"YZ5 6AB\",\r",
									"\"BC5 8DE\", \"GH5 0IJ\", \"KL3 3MN\", \"OP5 5QR\", \"ST2 7UV\", \"WX7 9YZ\", \"DE3 2FG\",\r",
									"\"IJ2 4KL\", \"MN5 6OP\", \"QR4 8ST\", \"UV8 1WX\", \"YZ2 3AB\", \"FG8 5IJ\", \"KL3 5MN\",\r",
									"\"OP3 9QR\", \"ST7 2UV\", \"WX8 4YZ\", \"AB5 6CD\", \"DE9 8FG\", \"IJ3 0KL\", \"MN9 2OP\",\r",
									"\"QR2 5ST\", \"UV9 7WX\"\r",
									"\r",
									"];\r",
									" \r",
									"function getRandomPostal() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomPostcodes.length);\r",
									"    return randomPostcodes[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"postcode\", getRandomPostal());\r",
									"\r",
									"\r",
									"function generateRandomName() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const nameLength = Math.floor(Math.random() * 10) + 5; // Generates a name with 5 to 14 characters\r",
									"  let randomName = '';\r",
									"\r",
									"  for (let i = 0; i < nameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    randomName += alphabet.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomName;\r",
									"}\r",
									"\r",
									"const randomName = generateRandomName();\r",
									"pm.globals.set(\"city\", randomName);\r",
									"\r",
									"\r",
									"\r",
									"const randomDigits = [\r",
									"    \"9876543210\", \"8765432109\", \"7654321098\", \"6543210987\", \"5432109876\", \"4321098765\", \"3210987654\"\r",
									"];\r",
									"\r",
									"// Function to generate a random set of 7 digits for the phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const randomDigit = Math.floor(Math.random() * randomDigits.length);\r",
									"    return randomDigits[randomDigit];\r",
									"}\r",
									"\r",
									"// Set the random UK phone number as a variable\r",
									"pm.variables.set(\"phone\", `44${getRandomPhoneNumber()}`);\r",
									"\r",
									"\r",
									"const randomHouseNames = [\r",
									"    \"Rose Cottage\", \"Oak View House\", \"Meadowcroft\", \"The Pines\", \"Riverside Manor\",\r",
									"    \"Elmwood Lodge\", \"Ivy Cottage\", \"Sunnyside Retreat\", \"Willow House\", \"Cedar Haven\",\r",
									"    \"Maple Mansion\", \"Sunset Villa\", \"Riverbank House\", \"Cherry Blossom Cottage\", \"Lakeside Lodge\",\r",
									"    \"Hilltop Haven\", \"Cedar Retreat\", \"Rosewood Residence\", \"Ivy Lane Cottage\", \"Forest View House\",\r",
									"    \"Alder Manor\", \"Beechwood House\", \"Juniper Retreat\", \"Magnolia Mansion\", \"Winding Way Cottage\",\r",
									"    \"Harbor View House\", \"Greenwood Cottage\", \"Silver Oak Residence\"\r",
									"];\r",
									"\r",
									"function getRandomHouse() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomHouseNames.length);\r",
									"    return randomHouseNames[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address\", getRandomHouse());\r",
									"\r",
									"// Random Address\r",
									"\r",
									"const randomStreets = [\r",
									"    \"High Street\", \"Main Street\", \"Park Avenue\", \"Maple Street\", \"Oak Avenue\",\r",
									"    \"Chestnut Lane\", \"Willow Road\", \"Pine Drive\", \"Elm Street\", \"Birch Lane\",\r",
									"    \"Meadow Lane\", \"Sunset Boulevard\", \"River Road\", \"Sycamore Avenue\", \"Cherry Lane\",\r",
									"    \"Lakeside Drive\", \"Hillcrest Avenue\", \"Cedar Street\", \"Rosewood Lane\", \"Ivy Lane\",\r",
									"    \"Forest Avenue\", \"Alder Road\", \"Beech Street\", \"Juniper Lane\", \"Magnolia Drive\",\r",
									"    \"Winding Way\", \"Harbor View\", \"Greenwood Avenue\", \"Silver Oak Lane\"\r",
									"];\r",
									"\r",
									"function getRandomStreet() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomStreets.length);\r",
									"    return randomStreets[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address1\", getRandomStreet());\r",
									"\r",
									"// Function to generate a random code and remove it from the array to ensure uniqueness\r",
									"// Function to generate a random 6-digit number\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100000 + Math.random() * 900000); // Generates a number between 100000 and 999999\r",
									"}\r",
									"\r",
									"// Function to generate a unique code starting with \"K9\"\r",
									"function generateUniqueCode() {\r",
									"    return \"K9\" + generateRandomNumber();\r",
									"}\r",
									"\r",
									"// Set the environment variable with the generated unique code\r",
									"pm.environment.set(\"unique_code\", generateUniqueCode());\r",
									"\r",
									"// Log the generated unique code for verification (optional)\r",
									"console.log(\"Generated Unique Code:\", pm.environment.get(\"unique_code\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const city = [\r",
									"    \"Birmingham\",\"Bradford\",\"Brighton & Hove\",\"Bristol\",\"Cambridge\",\"Cambridge\",\"Canterbury\",\"Carlisle\",\"Chelmsford\",\"Chester\",\"Chichester\",\"Colchester\",\"Coventry\",\"Derby\",\"Doncaster\",\"Durham\",\"Kingston\",\"Gloucester\",\"Hereford\",\r",
									"\"York\",\"Lancaster\",\"Leeds\",\"Leicester\",\"Lichfield\", \"Lincoln\", \"Liverpool\", \"London\",\"Manchester\"\r",
									"\r",
									"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomcity() {\r",
									"    const randomIndex = Math.floor(Math.random() * city.length);\r",
									"    return city[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"city\", getRandomcity());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var requestBody = pm.environment.get(\"request_body\");\r",
									"\r",
									"// Log the request body for verification\r",
									"console.log(\"Request Body:\", requestBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"uuid": "b906d08d-087e-4618-a330-0793fd61d3be"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"profile_image\": null,\r\n            \"email\": \"{{Staff-email}}\",\r\n            \"first_name\": \"{{Staff-name}}\",\r\n            \"last_name\": \"{{Staff-lname}}\",\r\n            \"staff_id\": \"{{unique_code}}\",\r\n            \"gender_id\": 1,\r\n            \"phone_number\": \"{{phone}}\",\r\n            \"alternate_phone_number\": \"{{phone}}\",\r\n            \"address_1\": \"{{address}}\",\r\n            \"address_2\": \"{{address1}}\",\r\n            \"city\": \"london\",\r\n            \"country_id\": 1,\r\n            \"post_code\": \"{{postcode}}\",\r\n            \"service_id\": [\r\n                {{service_id}}\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}calendar/form_submit",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"form_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of Staffs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.globals.set(\"STAFF_ID\", data.data[0][\"id\"]);\r",
									"pm.globals.set(\"STAFF_ID1\", data.data[1][\"id\"]);\r",
									"pm.globals.set(\"Staff_email1\", data.data[0][\"email\"]);\r",
									"pm.globals.set(\"staff_code1\", data.data[0][\"staff_id\"]);\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.globals.set(\"Staff_first_name\", data.data[0][\"first_name\"]);\r",
									"pm.globals.set(\"Staff_last_name\", data.data[0][\"last_name\"]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}calendar/list/staff",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"list",
								"staff"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// List of names\r",
									"const names = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// List of domain names\r",
									"const domains = [\"gmail.com\", \"agilecyber.com\", \"agilecybersolutions.com\"];\r",
									" \r",
									"// Function to generate a unique email with random 5-digit number\r",
									"function generateUniqueEmail() {\r",
									"    const randomIndexName = Math.floor(Math.random() * names.length);\r",
									"    const randomName = names[randomIndexName].toLowerCase();\r",
									"    \r",
									"    const randomIndexDomain = Math.floor(Math.random() * domains.length);\r",
									"    const randomDomain = domains[randomIndexDomain];\r",
									" \r",
									"    const uniqueIdentifier = Math.floor(10000 + Math.random() * 90000); // Generate random 5-digit number\r",
									" \r",
									"    return `${randomName}_${uniqueIdentifier}@${randomDomain}`;\r",
									"}\r",
									" \r",
									"// Set the unique email as a variable\r",
									"pm.variables.set(\"Staff-email\", generateUniqueEmail());\r",
									" \r",
									" \r",
									"//Firstname\r",
									"// List of first names\r",
									"const firstNames = [\r",
									"    \"James\", \"Emma\", \"Oliver\", \"Olivia\", \"Jack\", \r",
									"    \"Amelia\", \"William\", \"Isla\", \"Noah\", \"Ava\", \r",
									"    \"George\", \"Sophia\", \"Harry\", \"Mia\", \"Charlie\", \r",
									"    \"Harper\", \"Henry\", \"Grace\", \"Thomas\", \"Lily\"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomFirstName() {\r",
									"    const randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"    return firstNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"Staff-firstname\", getRandomFirstName());\r",
									" \r",
									"//Lastname\r",
									"// List of last names\r",
									"const lastNames = [\r",
									"    \"Jones\", \"Williams\", \"Taylor\", \"Brown\",\r",
									"    \"Davies\", \"Evans\", \"Patel\", \"Wilson\", \"Johnson\",\r",
									"    \"Singh\", \"Wright\", \"Robinson\", \"Thompson\", \"White\",\r",
									"    \"Walker\", \"Hall\", \"Green\"\r",
									"];\r",
									" \r",
									"// Function to get a random last name\r",
									"function getRandomLastName() {\r",
									"    const randomIndex = Math.floor(Math.random() * lastNames.length);\r",
									"    return lastNames[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random last name as a variable\r",
									"pm.variables.set(\"Staff-lastname\", getRandomLastName());\r",
									"\r",
									"\r",
									"const randomPostcodes = [\r",
									"    \"AB1 2CD\", \"EF3 4GH\", \"IJ5 6KL\", \"MN7 8OP\", \"QR9 0ST\", \"UV1 2WX\", \"YZ3 4AB\",\r",
									"    \"BC6 7DE\", \"GH8 9IJ\", \"KL0 1MN\", \"OP2 3QR\", \"ST4 5UV\", \"WX6 7YZ\", \"DE8 9FG\",\r",
									"    \"IJ0 1KL\", \"MN2 3OP\", \"QR4 5ST\", \"UV6 7WX\", \"YZ8 9AB\", \"FG0 1IJ\", \"KL3 4MN\",\r",
									"    \"OP5 6QR\", \"ST7 8UV\", \"WX9 0YZ\", \"AB2 3CD\", \"DE4 5FG\", \"IJ6 7KL\", \"MN8 9OP\",\r",
									"    \"QR1 2ST\", \"UV3 4WX\"\r",
									"];\r",
									" \r",
									"function getRandomPostal() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomPostcodes.length);\r",
									"    return randomPostcodes[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"postcode\", getRandomPostal());\r",
									"\r",
									"\r",
									"function generateRandomName() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const nameLength = Math.floor(Math.random() * 10) + 5; // Generates a name with 5 to 14 characters\r",
									"  let randomName = '';\r",
									"\r",
									"  for (let i = 0; i < nameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    randomName += alphabet.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomName;\r",
									"}\r",
									"\r",
									"const randomName = generateRandomName();\r",
									"pm.globals.set(\"city\", randomName);\r",
									"\r",
									"\r",
									"\r",
									"const randomDigits = [\r",
									"    \"9876543210\", \"8765432109\", \"7654321098\", \"6543210987\", \"5432109876\", \"4321098765\", \"3210987654\"\r",
									"];\r",
									"\r",
									"// Function to generate a random set of 7 digits for the phone number\r",
									"function getRandomPhoneNumber() {\r",
									"    const randomDigit = Math.floor(Math.random() * randomDigits.length);\r",
									"    return randomDigits[randomDigit];\r",
									"}\r",
									"\r",
									"// Set the random UK phone number as a variable\r",
									"pm.variables.set(\"phone\", `44${getRandomPhoneNumber()}`);\r",
									"\r",
									"\r",
									"const randomHouseNames = [\r",
									"    \"Rose Cottage\", \"Oak View House\", \"Meadowcroft\", \"The Pines\", \"Riverside Manor\",\r",
									"    \"Elmwood Lodge\", \"Ivy Cottage\", \"Sunnyside Retreat\", \"Willow House\", \"Cedar Haven\",\r",
									"    \"Maple Mansion\", \"Sunset Villa\", \"Riverbank House\", \"Cherry Blossom Cottage\", \"Lakeside Lodge\",\r",
									"    \"Hilltop Haven\", \"Cedar Retreat\", \"Rosewood Residence\", \"Ivy Lane Cottage\", \"Forest View House\",\r",
									"    \"Alder Manor\", \"Beechwood House\", \"Juniper Retreat\", \"Magnolia Mansion\", \"Winding Way Cottage\",\r",
									"    \"Harbor View House\", \"Greenwood Cottage\", \"Silver Oak Residence\"\r",
									"];\r",
									"\r",
									"function getRandomHouse() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomHouseNames.length);\r",
									"    return randomHouseNames[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address\", getRandomHouse());\r",
									"\r",
									"// Random Address\r",
									"\r",
									"const randomStreets = [\r",
									"    \"High Street\", \"Main Street\", \"Park Avenue\", \"Maple Street\", \"Oak Avenue\",\r",
									"    \"Chestnut Lane\", \"Willow Road\", \"Pine Drive\", \"Elm Street\", \"Birch Lane\",\r",
									"    \"Meadow Lane\", \"Sunset Boulevard\", \"River Road\", \"Sycamore Avenue\", \"Cherry Lane\",\r",
									"    \"Lakeside Drive\", \"Hillcrest Avenue\", \"Cedar Street\", \"Rosewood Lane\", \"Ivy Lane\",\r",
									"    \"Forest Avenue\", \"Alder Road\", \"Beech Street\", \"Juniper Lane\", \"Magnolia Drive\",\r",
									"    \"Winding Way\", \"Harbor View\", \"Greenwood Avenue\", \"Silver Oak Lane\"\r",
									"];\r",
									"\r",
									"function getRandomStreet() {\r",
									"    const randomStreet = Math.floor(Math.random() * randomStreets.length);\r",
									"    return randomStreets[randomStreet];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"address1\", getRandomStreet());\r",
									"\r",
									"\r",
									"const randomStaff = [\r",
									"    \"AB12\", \"EF34\", \"IJ56\", \"MN78\", \"QR90\", \"UV12\", \"YZ34\",\r",
									"    \"BC67\", \"GH89\", \"KL01\", \"OP23\", \"ST45\", \"WX67\", \"DE89\",\r",
									"    \"IJ11\", \"MN23\", \"QR45\", \"UV67\", \"YZ89\", \"FG01\", \"KL34\",\r",
									"    \"OP56\", \"ST78\", \"WX90\", \"AB23\", \"DE45\", \"IJ67\", \"MN89\",\r",
									"    \"QR12\", \"UV34\"\r",
									"];\r",
									" \r",
									"function getRandomStaffCode() {\r",
									"    const randomIndex = Math.floor(Math.random() * randomStaff.length);\r",
									"    return randomStaff[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"staff_code\", getRandomStaffCode());\r",
									"\r",
									"\r",
									"\r",
									"const city = [\r",
									"    \"Birmingham\",\"Bradford\",\"Brighton & Hove\",\"Bristol\",\"Cambridge\",\"Cambridge\",\"Canterbury\",\"Carlisle\",\"Chelmsford\",\"Chester\",\"Chichester\",\"Colchester\",\"Coventry\",\"Derby\",\"Doncaster\",\"Durham\",\"Kingston\",\"Gloucester\",\"Hereford\",\r",
									"\"York\",\"Lancaster\",\"Leeds\",\"Leicester\",\"Lichfield\", \"Lincoln\", \"Liverpool\", \"London\",\"Manchester\"\r",
									"\r",
									"\r",
									"];\r",
									" \r",
									"// Function to get a random first name\r",
									"function getRandomcity() {\r",
									"    const randomIndex = Math.floor(Math.random() * city.length);\r",
									"    return city[randomIndex];\r",
									"}\r",
									" \r",
									"// Set the random first name as a variable\r",
									"pm.variables.set(\"city\", getRandomcity());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n    \"data\": [\r\n        {   \"id\": {{STAFF_ID}},\r\n            \"profile_image\":null,\r\n            \"email\": \"{{Staff_email1}}\",\r\n            \"first_name\": \"{{Staff_first_name}}\",\r\n            \"last_name\": \"{{Staff-lastname}}\",\r\n            \"staff_id\": \"{{staff_code1}}\",\r\n            \"gender_id\": 1,\r\n            \"phone_number\": \"{{phone}}\",\r\n            \"alternate_phone_number\": \"44 1234567467\",\r\n            \"address_1\": \"{{address}}\",\r\n            \"address_2\": \"{{address1}}\",\r\n            \"city\": \"london\",\r\n            \"country_id\": 1,\r\n            \"post_code\": \"{{postcode}}\",\r\n            \"service_id\":[172]\r\n            \r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}calendar/form_submit?form_id=1",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"form_submit"
							],
							"query": [
								{
									"key": "form_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token1}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "User  Booking",
					"item": [
						{
							"name": "structure booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											";\r",
											"\r",
											"// Extract beneficiary_id\r",
											"const beneficiaryId = pm.response.json().columns[0].source[0].id;\r",
											"\r",
											"// Set beneficiary_id in environment variable\r",
											"pm.environment.set(\"beneficiary_id1\", beneficiaryId);\r",
											"\r",
											"// Extract the remaining_credit from environment variable\r",
											"const remainingCredit = parseFloat(pm.environment.get(\"remaining_credit\"));\r",
											"\r",
											"// Initialize variables to store service_id, price, and slot_id\r",
											"let serviceId, price, slotId;\r",
											"\r",
											"// Find the service with the least price\r",
											"const leastPriceService = pm.response.json().columns[1].source.reduce((prevService, currService) => {\r",
											"    // Compare the prices of previous service and current service\r",
											"    if (!prevService || currService.price < prevService.price) {\r",
											"        return currService;\r",
											"    } else {\r",
											"        return prevService;\r",
											"    }\r",
											"}, null);\r",
											"\r",
											"// If a suitable service with the least price is found, extract service_id, price, and slot_id\r",
											"if (leastPriceService) {\r",
											"    serviceId = leastPriceService.id;\r",
											"    price = leastPriceService.price;\r",
											"\r",
											"    // Check if the service has any slots\r",
											"    if (leastPriceService.slot.length > 0) {\r",
											"        // Select the first slot available for the service\r",
											"        slotId = leastPriceService.slot[0].id;\r",
											"    }\r",
											"}\r",
											"\r",
											"// Set service_id, price, and slot_id in environment variables\r",
											"pm.environment.set(\"service_id1\", serviceId);\r",
											"pm.environment.set(\"price1\", price);\r",
											"pm.environment.set(\"slot_id1\", slotId);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/structure/regular_booking",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"structure",
										"regular_booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "create regular booking",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random date within the specified range\r",
											"function generateRandomDate(startDate, endDate) {\r",
											"    // Convert the start and end dates to milliseconds\r",
											"    var startTimestamp = new Date(startDate).getTime();\r",
											"    var endTimestamp = new Date(endDate).getTime();\r",
											"\r",
											"    // Generate a random timestamp within the range\r",
											"    var randomTimestamp = startTimestamp + Math.random() * (endTimestamp - startTimestamp);\r",
											"\r",
											"    // Convert the random timestamp back to a date string\r",
											"    var randomDate = new Date(randomTimestamp);\r",
											"\r",
											"    // Format the date as YYYY-MM-DD\r",
											"    var formattedDate = randomDate.toISOString().split('T')[0];\r",
											"\r",
											"    return formattedDate;\r",
											"}\r",
											"\r",
											"// Set the start and end dates for the range\r",
											"var startDate = '2024-06-15';\r",
											"var endDate = '2024-06-14';\r",
											"\r",
											"// Generate a random date within the specified range\r",
											"var randomDate = generateRandomDate(startDate, endDate);\r",
											"\r",
											"// Set the environment variable with the generated date\r",
											"pm.environment.set('randomDate', randomDate);\r",
											"\r",
											"// Log the generated date for verification (optional)\r",
											"console.log(\"Random Date:\", pm.environment.get('randomDate'));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Set the environment variable 'booking_id' with the first booking id\r",
											"pm.environment.set('booking_id_payment', jsonData.booking_details.bookings[0].id);\r",
											"\r",
											"// Extract the total amount from the response and convert it to a 2-digit value\r",
											"// Parse the total amount from the response\r",
											"const totalAmountString = pm.response.json().booking_details.total;\r",
											"const totalAmountWithoutDecimal = parseInt(totalAmountString.split('£ ')[1]); // Extract the numerical part and convert to integer\r",
											"\r",
											"// Set the environment variable with the total amount without decimals\r",
											"pm.environment.set('total_amount', totalAmountWithoutDecimal);\r",
											"\r",
											"// Log the total amount for verification (optional)\r",
											"\r",
											"// Log the extracted values for verification (optional)\r",
											"console.log(\"Booking ID:\", pm.environment.get('booking_id'));\r",
											"console.log(\"Total Amount:\", pm.environment.get('total_amount'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"beneficiary_id\": [\r\n                {{beneficiary_id1}}\r\n            ],\r\n            \"service_id\": {{service_id1}},\r\n            \"booking_type_id\": 1,\r\n            \"booking_date\": [\r\n                {\r\n                    \"date\": \"{{randomDate}}\",\r\n                    \"slot_id\": {{slot_id1}}\r\n                }\r\n            ],\r\n            \"notes\": \"Celebrating a special occasion—any surprises welcome! Happy bookings\"\r\n            \r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/booking/regular_booking",
									"host": [
										"{{Url}}"
									],
									"path": [
										"booking",
										"regular_booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "payment create",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"evt_3OjFueDS5MmTOG0u0Zxsj5Wd\",\r\n  \"object\": \"event\",\r\n  \"api_version\": \"2023-10-16\",\r\n  \"created\": 1707807395,\r\n  \"data\": {\r\n    \"object\": {\r\n      \"id\": \"pi_3OjFueDS5MmTOG0u0G8ItJke\",\r\n      \"object\": \"payment_intent\",\r\n      \"amount\":{{total_amount}},\r\n      \"amount_capturable\": 0,\r\n      \"amount_details\": {\r\n        \"tip\": {\r\n        }\r\n      },\r\n      \"amount_received\":{{total_amount}},\r\n      \"application\": null,\r\n      \"application_fee_amount\": null,\r\n      \"automatic_payment_methods\": null,\r\n      \"canceled_at\": null,\r\n      \"cancellation_reason\": null,\r\n      \"capture_method\": \"automatic\",\r\n      \"client_secret\": \"pi_3OjFueDS5MmTOG0u0G8ItJke_secret_c1eYGEWKGv5IBIw2mQ4ZbS3Fp\",\r\n      \"confirmation_method\": \"automatic\",\r\n      \"created\": 1707807376,\r\n      \"currency\": \"gbp\",\r\n      \"customer\": null,\r\n      \"description\": null,\r\n      \"invoice\": null,\r\n      \"last_payment_error\": null,\r\n      \"latest_charge\": \"ch_3OjFueDS5MmTOG0u00O5bWmx\",\r\n      \"livemode\": false,\r\n      \"metadata\": {\r\n        \"customer_id\": \"{{user_id_1}}\",\r\n        \"booking_id\": \"[{{booking_id_payment}}]\"\r\n      },\r\n      \"next_action\": null,\r\n      \"on_behalf_of\": null,\r\n      \"payment_method\": \"pm_1OjFuwDS5MmTOG0uaKOzZGHO\",\r\n      \"payment_method_configuration_details\": null,\r\n      \"payment_method_options\": {\r\n        \"card\": {\r\n          \"installments\": null,\r\n          \"mandate_options\": null,\r\n          \"network\": null,\r\n          \"request_three_d_secure\": \"automatic\"\r\n        }\r\n      },\r\n      \"payment_method_types\": [\r\n        \"card\"\r\n      ],\r\n      \"processing\": null,\r\n      \"receipt_email\": null,\r\n      \"review\": null,\r\n      \"setup_future_usage\": null,\r\n      \"shipping\": null,\r\n      \"source\": null,\r\n      \"statement_descriptor\": null,\r\n      \"statement_descriptor_suffix\": null,\r\n      \"status\": \"succeeded\",\r\n      \"transfer_data\": null,\r\n      \"transfer_group\": null\r\n    }\r\n  },\r\n  \"livemode\": false,\r\n  \"pending_webhooks\": 2,\r\n  \"request\": {\r\n    \"id\": \"req_AZDupzyb0Rojyw\",\r\n    \"idempotency_key\": \"9cab0b3a-72a3-4109-9a8e-dfc8a20f536c\"\r\n  },\r\n  \"type\": \"payment_intent.created\"\r\n}\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}payment/payment/sale-transaction",
									"host": [
										"{{Url}}payment"
									],
									"path": [
										"payment",
										"sale-transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "payment success",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"evt_3OjFueDS5MmTOG0u0Zxsj5Wd\",\r\n  \"object\": \"event\",\r\n  \"api_version\": \"2023-10-16\",\r\n  \"created\": 1707807395,\r\n  \"data\": {\r\n    \"object\": {\r\n      \"id\": \"pi_3OjFueDS5MmTOG0u0G8ItJke\",\r\n      \"object\": \"payment_intent\",\r\n      \"amount\":{{total_amount}},\r\n      \"amount_capturable\": 0,\r\n      \"amount_details\": {\r\n        \"tip\": {\r\n        }\r\n      },\r\n      \"amount_received\":{{total_amount}},\r\n      \"application\": null,\r\n      \"application_fee_amount\": null,\r\n      \"automatic_payment_methods\": null,\r\n      \"canceled_at\": null,\r\n      \"cancellation_reason\": null,\r\n      \"capture_method\": \"automatic\",\r\n      \"client_secret\": \"pi_3OjFueDS5MmTOG0u0G8ItJke_secret_c1eYGEWKGv5IBIw2mQ4ZbS3Fp\",\r\n      \"confirmation_method\": \"automatic\",\r\n      \"created\": 1707807376,\r\n      \"currency\": \"gbp\",\r\n      \"customer\": null,\r\n      \"description\": null,\r\n      \"invoice\": null,\r\n      \"last_payment_error\": null,\r\n      \"latest_charge\": \"ch_3OjFueDS5MmTOG0u00O5bWmx\",\r\n      \"livemode\": false,\r\n      \"metadata\": {\r\n        \"customer_id\": \"{{user_id_1}}\",\r\n        \"booking_id\": \"[{{booking_id_payment}}]\"\r\n      },\r\n      \"next_action\": null,\r\n      \"on_behalf_of\": null,\r\n      \"payment_method\": \"pm_1OjFuwDS5MmTOG0uaKOzZGHO\",\r\n      \"payment_method_configuration_details\": null,\r\n      \"payment_method_options\": {\r\n        \"card\": {\r\n          \"installments\": null,\r\n          \"mandate_options\": null,\r\n          \"network\": null,\r\n          \"request_three_d_secure\": \"automatic\"\r\n        }\r\n      },\r\n      \"payment_method_types\": [\r\n        \"card\"\r\n      ],\r\n      \"processing\": null,\r\n      \"receipt_email\": null,\r\n      \"review\": null,\r\n      \"setup_future_usage\": null,\r\n      \"shipping\": null,\r\n      \"source\": null,\r\n      \"statement_descriptor\": null,\r\n      \"statement_descriptor_suffix\": null,\r\n      \"status\": \"succeeded\",\r\n      \"transfer_data\": null,\r\n      \"transfer_group\": null\r\n    }\r\n  },\r\n  \"livemode\": false,\r\n  \"pending_webhooks\": 2,\r\n  \"request\": {\r\n    \"id\": \"req_AZDupzyb0Rojyw\",\r\n    \"idempotency_key\": \"9cab0b3a-72a3-4109-9a8e-dfc8a20f536c\"\r\n  },\r\n  \"type\": \"payment_intent.succeeded\"\r\n}\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}payment/payment/sale-transaction",
									"host": [
										"{{Url}}payment"
									],
									"path": [
										"payment",
										"sale-transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "status list API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/status",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											";\r",
											"\r",
											"// Extract beneficiary_id\r",
											"const beneficiaryId = pm.response.json().columns[0].source[1].id;\r",
											"\r",
											"// Set beneficiary_id in environment variable\r",
											"pm.environment.set(\"beneficiary_id2\", beneficiaryId);\r",
											"\r",
											"// Extract the remaining_credit from environment variable\r",
											"const remainingCredit = parseFloat(pm.environment.get(\"remaining_credit\"));\r",
											"\r",
											"// Initialize variables to store service_id, price, and slot_id\r",
											"let serviceId, price, slotId;\r",
											"\r",
											"// Find the service with the least price\r",
											"const leastPriceService = pm.response.json().columns[1].source.reduce((prevService, currService) => {\r",
											"    // Compare the prices of previous service and current service\r",
											"    if (!prevService || currService.price < prevService.price) {\r",
											"        return currService;\r",
											"    } else {\r",
											"        return prevService;\r",
											"    }\r",
											"}, null);\r",
											"\r",
											"// If a suitable service with the least price is found, extract service_id, price, and slot_id\r",
											"if (leastPriceService) {\r",
											"    serviceId = leastPriceService.id;\r",
											"    price = leastPriceService.price;\r",
											"\r",
											"    // Check if the service has any slots\r",
											"    if (leastPriceService.slot.length > 0) {\r",
											"        // Select the first slot available for the service\r",
											"        slotId = leastPriceService.slot[0].id;\r",
											"    }\r",
											"}\r",
											"\r",
											"// Set service_id, price, and slot_id in environment variables\r",
											"pm.environment.set(\"service_id2\", serviceId);\r",
											"pm.environment.set(\"price2\", price);\r",
											"pm.environment.set(\"slot_id2\", slotId);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/structure/regular_booking",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"structure",
										"regular_booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create multiple booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Check if the response status code is 400\r",
											"if (pm.response.code === 400) {\r",
											"    // Treat it as a successful response (200 OK)\r",
											"    pm.test(\"Status code is 200 for a 400 response\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    // You may add additional tests or actions for a 400 response here if needed\r",
											"\r",
											"    // Log a message (optional)\r",
											"    console.log(\"Response status 400 treated as 200 OK\");\r",
											"}\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Set the environment variable 'booking_id' with the first booking id\r",
											"pm.environment.set('booking_id_payment2', jsonData.booking_details.bookings[0].id);\r",
											"\r",
											"// Extract the total amount from the response and convert it to a 2-digit value\r",
											"// Parse the total amount from the response\r",
											"const totalAmountString = pm.response.json().booking_details.total;\r",
											"const totalAmountWithoutDecimal = parseInt(totalAmountString.split('£ ')[1]); // Extract the numerical part and convert to integer\r",
											"\r",
											"// Set the environment variable with the total amount without decimals\r",
											"pm.environment.set('total_amount2', totalAmountWithoutDecimal);\r",
											"\r",
											"// Log the total amount for verification (optional)\r",
											"\r",
											"// Log the extracted values for verification (optional)\r",
											"console.log(\"Booking ID:\", pm.environment.get('booking_id'));\r",
											"console.log(\"Total Amount:\", pm.environment.get('total_amount'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random date within the specified range\r",
											"function generateRandomDate(startDate, endDate) {\r",
											"    // Convert the start and end dates to milliseconds\r",
											"    var startTimestamp = new Date(startDate).getTime();\r",
											"    var endTimestamp = new Date(endDate).getTime();\r",
											"\r",
											"    // Create an array to store generated dates\r",
											"    var generatedDates = [];\r",
											"\r",
											"    // Function to check if a date is already generated\r",
											"    function isDateGenerated(date) {\r",
											"        return generatedDates.includes(date);\r",
											"    }\r",
											"\r",
											"    // Generate a random date within the range until it's unique\r",
											"    var randomDate;\r",
											"    do {\r",
											"        var randomTimestamp = startTimestamp + Math.random() * (endTimestamp - startTimestamp);\r",
											"        randomDate = new Date(randomTimestamp);\r",
											"        var formattedDate = randomDate.toISOString().split('T')[0];\r",
											"    } while (isDateGenerated(formattedDate));\r",
											"\r",
											"    // Store the generated date in the array\r",
											"    generatedDates.push(formattedDate);\r",
											"\r",
											"    return formattedDate;\r",
											"}\r",
											"\r",
											"// Set the start and end dates for the range\r",
											"var startDate = '2024-06-10';\r",
											"var endDate = '2024-08-01';\r",
											"\r",
											"// Generate a random unique date within the specified range\r",
											"var randomDate = generateRandomDate(startDate, endDate);\r",
											"\r",
											"// Set the environment variable with the generated date\r",
											"pm.environment.set('randomDate1', randomDate);\r",
											"\r",
											"// Log the generated date for verification (optional)\r",
											"console.log(\"Random Unique Date:\", pm.environment.get('randomDate'));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"beneficiary_id\": [{{beneficiary_id2}}],\r\n            \"service_id\": {{service_id2}},\r\n            \"booking_type_id\": 2,\r\n            \"booking_date\": [\r\n                {\r\n                    \"date\": \"{{randomDate1}}\",\r\n                    \"slot_id\": {{slot_id2}}\r\n                }\r\n            ],\r\n            \"notes\": \"To book a pet service, contact the provider, specify your pet's details and service needs, confirm availability, discuss pricing, and provide contact information. Once details are agreed upon, receive a booking confirmation outlining terms and conditions.\"\r\n           \r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}booking/regular_booking",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"regular_booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "payment create -multiple booking",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"evt_3OjFueDS5MmTOG0u0Zxsj5Wd\",\r\n  \"object\": \"event\",\r\n  \"api_version\": \"2023-10-16\",\r\n  \"created\": 1707807395,\r\n  \"data\": {\r\n    \"object\": {\r\n      \"id\": \"pi_3OjFueDS5MmTOG0u0G8ItJke\",\r\n      \"object\": \"payment_intent\",\r\n      \"amount\":{{total_amount2}},\r\n      \"amount_capturable\": 0,\r\n      \"amount_details\": {\r\n        \"tip\": {\r\n        }\r\n      },\r\n      \"amount_received\":{{total_amount2}},\r\n      \"application\": null,\r\n      \"application_fee_amount\": null,\r\n      \"automatic_payment_methods\": null,\r\n      \"canceled_at\": null,\r\n      \"cancellation_reason\": null,\r\n      \"capture_method\": \"automatic\",\r\n      \"client_secret\": \"pi_3OjFueDS5MmTOG0u0G8ItJke_secret_c1eYGEWKGv5IBIw2mQ4ZbS3Fp\",\r\n      \"confirmation_method\": \"automatic\",\r\n      \"created\": 1707807376,\r\n      \"currency\": \"gbp\",\r\n      \"customer\": null,\r\n      \"description\": null,\r\n      \"invoice\": null,\r\n      \"last_payment_error\": null,\r\n      \"latest_charge\": \"ch_3OjFueDS5MmTOG0u00O5bWmx\",\r\n      \"livemode\": false,\r\n      \"metadata\": {\r\n        \"customer_id\": \"{{user_id_1}}\",\r\n        \"booking_id\": \"[{{booking_id_payment2}}]\"\r\n      },\r\n      \"next_action\": null,\r\n      \"on_behalf_of\": null,\r\n      \"payment_method\": \"pm_1OjFuwDS5MmTOG0uaKOzZGHO\",\r\n      \"payment_method_configuration_details\": null,\r\n      \"payment_method_options\": {\r\n        \"card\": {\r\n          \"installments\": null,\r\n          \"mandate_options\": null,\r\n          \"network\": null,\r\n          \"request_three_d_secure\": \"automatic\"\r\n        }\r\n      },\r\n      \"payment_method_types\": [\r\n        \"card\"\r\n      ],\r\n      \"processing\": null,\r\n      \"receipt_email\": null,\r\n      \"review\": null,\r\n      \"setup_future_usage\": null,\r\n      \"shipping\": null,\r\n      \"source\": null,\r\n      \"statement_descriptor\": null,\r\n      \"statement_descriptor_suffix\": null,\r\n      \"status\": \"succeeded\",\r\n      \"transfer_data\": null,\r\n      \"transfer_group\": null\r\n    }\r\n  },\r\n  \"livemode\": false,\r\n  \"pending_webhooks\": 2,\r\n  \"request\": {\r\n    \"id\": \"req_AZDupzyb0Rojyw\",\r\n    \"idempotency_key\": \"9cab0b3a-72a3-4109-9a8e-dfc8a20f536c\"\r\n  },\r\n  \"type\": \"payment_intent.created\"\r\n}\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}payment/payment/sale-transaction",
									"host": [
										"{{Url}}payment"
									],
									"path": [
										"payment",
										"sale-transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "payment success -multiple booking",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"evt_3OjFueDS5MmTOG0u0Zxsj5Wd\",\r\n  \"object\": \"event\",\r\n  \"api_version\": \"2023-10-16\",\r\n  \"created\": 1707807395,\r\n  \"data\": {\r\n    \"object\": {\r\n      \"id\": \"pi_3OjFueDS5MmTOG0u0G8ItJke\",\r\n      \"object\": \"payment_intent\",\r\n      \"amount\":{{total_amount2}},\r\n      \"amount_capturable\": 0,\r\n      \"amount_details\": {\r\n        \"tip\": {\r\n        }\r\n      },\r\n      \"amount_received\":{{total_amount2}},\r\n      \"application\": null,\r\n      \"application_fee_amount\": null,\r\n      \"automatic_payment_methods\": null,\r\n      \"canceled_at\": null,\r\n      \"cancellation_reason\": null,\r\n      \"capture_method\": \"automatic\",\r\n      \"client_secret\": \"pi_3OjFueDS5MmTOG0u0G8ItJke_secret_c1eYGEWKGv5IBIw2mQ4ZbS3Fp\",\r\n      \"confirmation_method\": \"automatic\",\r\n      \"created\": 1707807376,\r\n      \"currency\": \"gbp\",\r\n      \"customer\": null,\r\n      \"description\": null,\r\n      \"invoice\": null,\r\n      \"last_payment_error\": null,\r\n      \"latest_charge\": \"ch_3OjFueDS5MmTOG0u00O5bWmx\",\r\n      \"livemode\": false,\r\n      \"metadata\": {\r\n        \"customer_id\": \"{{user_id_1}}\",\r\n        \"booking_id\": \"[{{booking_id_payment2}}]\"\r\n      },\r\n      \"next_action\": null,\r\n      \"on_behalf_of\": null,\r\n      \"payment_method\": \"pm_1OjFuwDS5MmTOG0uaKOzZGHO\",\r\n      \"payment_method_configuration_details\": null,\r\n      \"payment_method_options\": {\r\n        \"card\": {\r\n          \"installments\": null,\r\n          \"mandate_options\": null,\r\n          \"network\": null,\r\n          \"request_three_d_secure\": \"automatic\"\r\n        }\r\n      },\r\n      \"payment_method_types\": [\r\n        \"card\"\r\n      ],\r\n      \"processing\": null,\r\n      \"receipt_email\": null,\r\n      \"review\": null,\r\n      \"setup_future_usage\": null,\r\n      \"shipping\": null,\r\n      \"source\": null,\r\n      \"statement_descriptor\": null,\r\n      \"statement_descriptor_suffix\": null,\r\n      \"status\": \"succeeded\",\r\n      \"transfer_data\": null,\r\n      \"transfer_group\": null\r\n    }\r\n  },\r\n  \"livemode\": false,\r\n  \"pending_webhooks\": 2,\r\n  \"request\": {\r\n    \"id\": \"req_AZDupzyb0Rojyw\",\r\n    \"idempotency_key\": \"9cab0b3a-72a3-4109-9a8e-dfc8a20f536c\"\r\n  },\r\n  \"type\": \"payment_intent.succeeded\"\r\n}\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}payment/payment/sale-transaction",
									"host": [
										"{{Url}}payment"
									],
									"path": [
										"payment",
										"sale-transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "structure booking Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											";\r",
											"\r",
											"// Extract beneficiary_id\r",
											"const beneficiaryId = pm.response.json().columns[0].source[2].id;\r",
											"\r",
											"// Set beneficiary_id in environment variable\r",
											"pm.environment.set(\"beneficiary_id3\", beneficiaryId);\r",
											"\r",
											"// Extract the remaining_credit from environment variable\r",
											"const remainingCredit = parseFloat(pm.environment.get(\"remaining_credit\"));\r",
											"\r",
											"// Initialize variables to store service_id, price, and slot_id\r",
											"let serviceId, price, slotId;\r",
											"\r",
											"// Find the service with the least price\r",
											"const leastPriceService = pm.response.json().columns[1].source.reduce((prevService, currService) => {\r",
											"    // Compare the prices of previous service and current service\r",
											"    if (!prevService || currService.price < prevService.price) {\r",
											"        return currService;\r",
											"    } else {\r",
											"        return prevService;\r",
											"    }\r",
											"}, null);\r",
											"\r",
											"// If a suitable service with the least price is found, extract service_id, price, and slot_id\r",
											"if (leastPriceService) {\r",
											"    serviceId = leastPriceService.id;\r",
											"    price = leastPriceService.price;\r",
											"\r",
											"    // Check if the service has any slots\r",
											"    if (leastPriceService.slot.length > 0) {\r",
											"        // Select the first slot available for the service\r",
											"        slotId = leastPriceService.slot[0].id;\r",
											"    }\r",
											"}\r",
											"\r",
											"// Set service_id, price, and slot_id in environment variables\r",
											"pm.environment.set(\"service_id3\", serviceId);\r",
											"pm.environment.set(\"price3\", price);\r",
											"pm.environment.set(\"slot_id3\", slotId);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/structure/regular_booking",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"structure",
										"regular_booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create recurring booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Set the environment variable 'booking_id' with the first booking id\r",
											"pm.environment.set('booking_id_payment3', jsonData.booking_details.bookings[0].id);\r",
											"\r",
											"// Extract the total amount from the response and convert it to a 2-digit value\r",
											"// Parse the total amount from the response\r",
											"const totalAmountString = pm.response.json().booking_details.total;\r",
											"const totalAmountWithoutDecimal = parseInt(totalAmountString.split('£ ')[1]); // Extract the numerical part and convert to integer\r",
											"\r",
											"// Set the environment variable with the total amount without decimals\r",
											"pm.environment.set('total_amount3', totalAmountWithoutDecimal);\r",
											"\r",
											"// Log the total amount for verification (optional)\r",
											"\r",
											"// Log the extracted values for verification (optional)\r",
											"console.log(\"Booking ID:\", pm.environment.get('booking_id'));\r",
											"console.log(\"Total Amount:\", pm.environment.get('total_amount'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"beneficiary_id\": [{{beneficiary_id3}}],\r\n            \"service_id\": {{service_id3}},\r\n            \"booking_type_id\":3,\r\n            \"booking_date\": [\r\n                {\r\n                    \"date\": \"{{randomDate}}\",\r\n                      \"slot_id\": {{slot_id3}}\r\n                }\r\n            ],\r\n            \"notes\": \"To book a pet service, contact the provider, specify your pet's details and service needs, confirm availability, discuss pricing, and provide contact information. Once details are agreed upon, receive a booking confirmation outlining terms and conditions.\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}booking/regular_booking",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"regular_booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "payment create  - reccuring",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"evt_3OjFueDS5MmTOG0u0Zxsj5Wd\",\r\n  \"object\": \"event\",\r\n  \"api_version\": \"2023-10-16\",\r\n  \"created\": 1707807395,\r\n  \"data\": {\r\n    \"object\": {\r\n      \"id\": \"pi_3OjFueDS5MmTOG0u0G8ItJke\",\r\n      \"object\": \"payment_intent\",\r\n      \"amount\":{{total_amount3}},\r\n      \"amount_capturable\": 0,\r\n      \"amount_details\": {\r\n        \"tip\": {\r\n        }\r\n      },\r\n      \"amount_received\":{{total_amount3}},\r\n      \"application\": null,\r\n      \"application_fee_amount\": null,\r\n      \"automatic_payment_methods\": null,\r\n      \"canceled_at\": null,\r\n      \"cancellation_reason\": null,\r\n      \"capture_method\": \"automatic\",\r\n      \"client_secret\": \"pi_3OjFueDS5MmTOG0u0G8ItJke_secret_c1eYGEWKGv5IBIw2mQ4ZbS3Fp\",\r\n      \"confirmation_method\": \"automatic\",\r\n      \"created\": 1707807376,\r\n      \"currency\": \"gbp\",\r\n      \"customer\": null,\r\n      \"description\": null,\r\n      \"invoice\": null,\r\n      \"last_payment_error\": null,\r\n      \"latest_charge\": \"ch_3OjFueDS5MmTOG0u00O5bWmx\",\r\n      \"livemode\": false,\r\n      \"metadata\": {\r\n        \"customer_id\": \"{{user_id_1}}\",\r\n        \"booking_id\": \"[{{booking_id_payment3}}]\"\r\n      },\r\n      \"next_action\": null,\r\n      \"on_behalf_of\": null,\r\n      \"payment_method\": \"pm_1OjFuwDS5MmTOG0uaKOzZGHO\",\r\n      \"payment_method_configuration_details\": null,\r\n      \"payment_method_options\": {\r\n        \"card\": {\r\n          \"installments\": null,\r\n          \"mandate_options\": null,\r\n          \"network\": null,\r\n          \"request_three_d_secure\": \"automatic\"\r\n        }\r\n      },\r\n      \"payment_method_types\": [\r\n        \"card\"\r\n      ],\r\n      \"processing\": null,\r\n      \"receipt_email\": null,\r\n      \"review\": null,\r\n      \"setup_future_usage\": null,\r\n      \"shipping\": null,\r\n      \"source\": null,\r\n      \"statement_descriptor\": null,\r\n      \"statement_descriptor_suffix\": null,\r\n      \"status\": \"succeeded\",\r\n      \"transfer_data\": null,\r\n      \"transfer_group\": null\r\n    }\r\n  },\r\n  \"livemode\": false,\r\n  \"pending_webhooks\": 2,\r\n  \"request\": {\r\n    \"id\": \"req_AZDupzyb0Rojyw\",\r\n    \"idempotency_key\": \"9cab0b3a-72a3-4109-9a8e-dfc8a20f536c\"\r\n  },\r\n  \"type\": \"payment_intent.created\"\r\n}\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}payment/payment/sale-transaction",
									"host": [
										"{{Url}}payment"
									],
									"path": [
										"payment",
										"sale-transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "payment success reccuring",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"evt_3OjFueDS5MmTOG0u0Zxsj5Wd\",\r\n  \"object\": \"event\",\r\n  \"api_version\": \"2023-10-16\",\r\n  \"created\": 1707807395,\r\n  \"data\": {\r\n    \"object\": {\r\n      \"id\": \"pi_3OjFueDS5MmTOG0u0G8ItJke\",\r\n      \"object\": \"payment_intent\",\r\n      \"amount\":{{total_amount3}},\r\n      \"amount_capturable\": 0,\r\n      \"amount_details\": {\r\n        \"tip\": {\r\n        }\r\n      },\r\n      \"amount_received\":{{total_amount3}},\r\n      \"application\": null,\r\n      \"application_fee_amount\": null,\r\n      \"automatic_payment_methods\": null,\r\n      \"canceled_at\": null,\r\n      \"cancellation_reason\": null,\r\n      \"capture_method\": \"automatic\",\r\n      \"client_secret\": \"pi_3OjFueDS5MmTOG0u0G8ItJke_secret_c1eYGEWKGv5IBIw2mQ4ZbS3Fp\",\r\n      \"confirmation_method\": \"automatic\",\r\n      \"created\": 1707807376,\r\n      \"currency\": \"gbp\",\r\n      \"customer\": null,\r\n      \"description\": null,\r\n      \"invoice\": null,\r\n      \"last_payment_error\": null,\r\n      \"latest_charge\": \"ch_3OjFueDS5MmTOG0u00O5bWmx\",\r\n      \"livemode\": false,\r\n      \"metadata\": {\r\n        \"customer_id\": \"{{user_id_1}}\",\r\n        \"booking_id\": \"[{{booking_id_payment3}}]\"\r\n      },\r\n      \"next_action\": null,\r\n      \"on_behalf_of\": null,\r\n      \"payment_method\": \"pm_1OjFuwDS5MmTOG0uaKOzZGHO\",\r\n      \"payment_method_configuration_details\": null,\r\n      \"payment_method_options\": {\r\n        \"card\": {\r\n          \"installments\": null,\r\n          \"mandate_options\": null,\r\n          \"network\": null,\r\n          \"request_three_d_secure\": \"automatic\"\r\n        }\r\n      },\r\n      \"payment_method_types\": [\r\n        \"card\"\r\n      ],\r\n      \"processing\": null,\r\n      \"receipt_email\": null,\r\n      \"review\": null,\r\n      \"setup_future_usage\": null,\r\n      \"shipping\": null,\r\n      \"source\": null,\r\n      \"statement_descriptor\": null,\r\n      \"statement_descriptor_suffix\": null,\r\n      \"status\": \"succeeded\",\r\n      \"transfer_data\": null,\r\n      \"transfer_group\": null\r\n    }\r\n  },\r\n  \"livemode\": false,\r\n  \"pending_webhooks\": 2,\r\n  \"request\": {\r\n    \"id\": \"req_AZDupzyb0Rojyw\",\r\n    \"idempotency_key\": \"9cab0b3a-72a3-4109-9a8e-dfc8a20f536c\"\r\n  },\r\n  \"type\": \"payment_intent.succeeded\"\r\n}\r\n ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}payment/payment/sale-transaction",
									"host": [
										"{{Url}}payment"
									],
									"path": [
										"payment",
										"sale-transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "Previous",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/my_bookings?filter_type=\"previous\"",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"my_bookings"
									],
									"query": [
										{
											"key": "filter_type",
											"value": "\"previous\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Next",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/my_bookings?filter_type=\"upcoming\"",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"my_bookings"
									],
									"query": [
										{
											"key": "filter_type",
											"value": "\"upcoming\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "My Bookings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var responseJson = JSON.parse(responseBody);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Parse the response body as JSON\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the ID value from the response\r",
											"var bookingId = responseBody.data[2].id;\r",
											"\r",
											"// Set the environment variable with the extracted ID value\r",
											"pm.environment.set('cancel_booking', bookingId);\r",
											"\r",
											"// Log the extracted ID value for verification (optional)\r",
											"console.log(\"Cancel Booking ID:\", pm.environment.get('cancel_booking'));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/booking/my_bookings",
									"host": [
										"{{Url}}"
									],
									"path": [
										"booking",
										"my_bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "cancel booking",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":{{cancel_booking}},\r\n    \"cancel_reason\": \"test cancelled\",\r\n    \"cancel_time\": {\r\n        \"days\": 0,\r\n        \"hours\": 1\r\n    },\r\n    \"cancel_price\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/booking/cancel_booking",
									"host": [
										"{{Url}}"
									],
									"path": [
										"booking",
										"cancel_booking"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{refresh_token1}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Admin Booking Workflow",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/booking/list/bookings",
									"host": [
										"{{Url}}"
									],
									"path": [
										"booking",
										"list",
										"bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "status",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}/booking/status",
									"host": [
										"{{Url}}"
									],
									"path": [
										"booking",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "List by status pending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"postman.setEnvironmentVariable(\"Booking_ID_approve\", pm.response.json().data[0].services[0].slots[0].Bookings[0].id);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?status=pending",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List by status unassigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"Booking_ID\", pm.response.json().data[0].services[0].slots[0].Bookings[0].id);\r",
											"postman.setEnvironmentVariable(\"Booking_ID1\", pm.response.json().data[0].services[0].slots[0].Bookings[0].id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?status=unassigned",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "status",
											"value": "unassigned"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List by status assigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?status=assigned",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "status",
											"value": "assigned"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List by status rejected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?status=rejected",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "status",
											"value": "rejected"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List by status cancelled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?status=cancelled",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "status",
											"value": "cancelled"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List by status completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?status=completed",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "status",
											"value": "completed"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "filter by status,service and date",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?service=1&&status=pending&&from_date=2024-01-27&&to_date=2024-12-30",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "service",
											"value": "1"
										},
										{
											"key": null,
											"value": null
										},
										{
											"key": "status",
											"value": "pending"
										},
										{
											"key": null,
											"value": null
										},
										{
											"key": "from_date",
											"value": "2024-01-27"
										},
										{
											"key": null,
											"value": null
										},
										{
											"key": "to_date",
											"value": "2024-12-30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Status and date",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?status=unassigned&&from_date=2024-04-01&&to_date=2024-04-03",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "status",
											"value": "unassigned"
										},
										{
											"key": null,
											"value": null
										},
										{
											"key": "from_date",
											"value": "2024-04-01"
										},
										{
											"key": null,
											"value": null
										},
										{
											"key": "to_date",
											"value": "2024-04-03"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List by service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?service={{Service_id}}",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "service",
											"value": "{{Service_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List by Date&Slot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?slot={{Slot_id}}",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "slot",
											"value": "{{Slot_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Service and status",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Url}}booking/list/bookings?service={{Service_id}}&&status=rejected",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"list",
										"bookings"
									],
									"query": [
										{
											"key": "service",
											"value": "{{Service_id}}"
										},
										{
											"key": null,
											"value": null
										},
										{
											"key": "status",
											"value": "rejected"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "approve booking",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"booking_id\":{{Booking_ID_approve}},\r\n    \"status\": \"unassigned\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}booking/status_update",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"status_update"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"booking_id\": {{Booking_ID}},\r\n    \"status\": \"Approved\",\r\n   \"staff_id\": {{STAFF_ID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}/booking/status_update",
									"host": [
										"{{Url}}"
									],
									"path": [
										"booking",
										"status_update"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign staff",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Admin_refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"booking_id\": [{{Booking_ID}}],\r\n    \"status\": \"unassigned\",\r\n    \"staff_id\":{{STAFF_ID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}booking/staff_assign",
									"host": [
										"{{Url}}booking"
									],
									"path": [
										"staff_assign"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{Admin_refresh_token1}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "staff schedule",
			"item": [
				{
					"name": "Pending List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Parse the response body as JSON\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}booking/staff_schedule?booking_date={{randomDate}}&status=pending",
							"host": [
								"{{Url}}booking"
							],
							"path": [
								"staff_schedule"
							],
							"query": [
								{
									"key": "booking_date",
									"value": "{{randomDate}}"
								},
								{
									"key": "status",
									"value": "pending"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Completed List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}booking/staff_schedule?booking_date={{randomDate}}&status=completed",
							"host": [
								"{{Url}}booking"
							],
							"path": [
								"staff_schedule"
							],
							"query": [
								{
									"key": "booking_date",
									"value": "{{randomDate}}"
								},
								{
									"key": "status",
									"value": "completed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Completed List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}booking/staff_schedule?booking_date={{randomDate}}&status=completed",
							"host": [
								"{{Url}}booking"
							],
							"path": [
								"staff_schedule"
							],
							"query": [
								{
									"key": "booking_date",
									"value": "{{randomDate}}"
								},
								{
									"key": "status",
									"value": "completed"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Staff_refresh_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "invoice list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"var responseData = pm.response.json();\r",
									"\r",
									"// Find the first entry with status \"Due\"\r",
									"var dueInvoice = responseData.data.find(invoice => invoice.status === \"Paid\");\r",
									"\r",
									"// Set the environment variable\r",
									"if (dueInvoice) {\r",
									"    pm.environment.set(\"paid_invoice_id\", dueInvoice.id.toString());\r",
									"    \r",
									"    console.log(\"Due Invoice ID set: \" + dueInvoice.id);\r",
									"} else {\r",
									"    console.log(\"No invoice with status 'Due' found.\");\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/admin/invoice/list",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"admin",
								"invoice",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice list Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"var responseData = pm.response.json();\r",
									"\r",
									"// Find the first entry with status \"Due\"\r",
									"var dueInvoice = responseData.data.find(invoice => invoice.status === \"Paid\");\r",
									"\r",
									"// Set the environment variable\r",
									"if (dueInvoice) {\r",
									"    pm.environment.set(\"paid_invoice_id\", dueInvoice.id.toString());\r",
									"    \r",
									"    console.log(\"Due Invoice ID set: \" + dueInvoice.id);\r",
									"} else {\r",
									"    console.log(\"No invoice with status 'Due' found.\");\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/admin/invoice/list",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"admin",
								"invoice",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice list due",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"var responseData = pm.response.json();\r",
									"\r",
									"// Find the first entry with status \"Due\"\r",
									"var dueInvoice = responseData.data.find(invoice => invoice.status === \"Due\");\r",
									"\r",
									"// Set the environment variable\r",
									"if (dueInvoice) {\r",
									"    pm.environment.set(\"due_invoice_id\", dueInvoice.id.toString());\r",
									"    console.log(\"Due Invoice ID set: \" + dueInvoice.id);\r",
									"} else {\r",
									"    console.log(\"No invoice with status 'Due' found.\");\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/admin/invoice/list?status=due",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"admin",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "status",
									"value": "due"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice list paid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"var responseData = pm.response.json();\r",
									"\r",
									"// Find the first entry with status \"Due\"\r",
									"var dueInvoice = responseData.data.find(invoice => invoice.status === \"Due\");\r",
									"\r",
									"// Set the environment variable\r",
									"if (dueInvoice) {\r",
									"    pm.environment.set(\"due_invoice_id\", dueInvoice.id.toString());\r",
									"    console.log(\"Due Invoice ID set: \" + dueInvoice.id);\r",
									"} else {\r",
									"    console.log(\"No invoice with status 'Due' found.\");\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/admin/invoice/list?status=paid",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"admin",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "status",
									"value": "paid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice list customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();\r",
									"// postman.setEnvironmentVariable(\"invoice_id\", responseJson.data[0]['id']);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/list/invoices",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"list",
								"invoices"
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice list date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/admin/invoice/list?from_date=2024-02-11",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"admin",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "from_date",
									"value": "2024-02-11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice list customer view",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/list/invoices?id=25",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"list",
								"invoices"
							],
							"query": [
								{
									"key": "id",
									"value": "25"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "filter customer name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/admin/invoice/list?customer_name=akila&from_date = 2024-02-01&to_date = 2024-02-31&page_sizestatus=1",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"admin",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "customer_name",
									"value": "akila"
								},
								{
									"key": "from_date ",
									"value": " 2024-02-01"
								},
								{
									"key": "to_date ",
									"value": " 2024-02-31"
								},
								{
									"key": "page_sizestatus",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "paid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/invoice/update?invoice_id={{paid_invoice_id}}&status=due",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"invoice",
								"update"
							],
							"query": [
								{
									"key": "invoice_id",
									"value": "{{paid_invoice_id}}"
								},
								{
									"key": "status",
									"value": "due"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Beneficiary delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// if (pm.response.code === 400) {\r",
									"//     // Treat it as a successful response (200 OK)\r",
									"//     pm.test(\"Status code is 200 for a 400 response\", function () {\r",
									"//         pm.response.to.have.status(200);\r",
									"//     });\r",
									"\r",
									"//     // You may add additional tests or actions for a 400 response here if needed\r",
									"\r",
									"//     // Log a message (optional)\r",
									"//     console.log(\"Response status 400 treated as 200 OK\");\r",
									"// }\r",
									"if (pm.response.code === 400) {\r",
									"    // Override the status code to 200\r",
									"    pm.response.code = 200;\r",
									"\r",
									"    // Log a message (optional)\r",
									"    console.log(\"Response status 400 treated as 200 OK\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\" : [{{beneficiary_ID_del}}]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit/bulk?form_id=6",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User reject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":{{user-reject-id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/role/reject",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"role",
								"reject"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tag Category Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 400) {\r",
									"    // Override the status code to 200\r",
									"    pm.response.code = 200;\r",
									"\r",
									"    // Log a message (optional)\r",
									"    console.log(\"Response status 400 treated as 200 OK\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\" : [{{Tag Category_ID}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}user/form_submit/bulk?form_id=14",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "14"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Service delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status is 400\r",
									"if (responseCode.code === 400) {\r",
									"    // Set the response code to 200\r",
									"    tests['Response code is 200'] = responseCode.code === 200;\r",
									"    // Update the response status text\r",
									"    responseCode.code = 200;\r",
									"    responseCode.detail = 'OK (status overridden from 400)';\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\" : [{{Service_id1}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}service/form_submit/bulk?form_id=1",
							"host": [
								"{{Url}}service"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"booking_id\" :{{Booking_ID1}},\r\n    \"status\": \"rejected\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}booking/status_update",
							"host": [
								"{{Url}}booking"
							],
							"path": [
								"status_update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Staff Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status code is 400\r",
									"if (pm.response.code === 400) {\r",
									"    // Override the status code to 200\r",
									"    pm.response.code = 200;\r",
									"\r",
									"    // Log a message (optional)\r",
									"    console.log(\"Response status 400 treated as 200 OK\");\r",
									"}\r",
									"// Add your other tests here\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"{{STAFF_ID}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}calendar/form_submit/bulk?form_id=1",
							"host": [
								"{{Url}}calendar"
							],
							"path": [
								"form_submit",
								"bulk"
							],
							"query": [
								{
									"key": "form_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Admin_refresh_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "customer notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/notifications/index?type=in_app",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"notifications",
								"index"
							],
							"query": [
								{
									"key": "type",
									"value": "in_app"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "admin notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/notifications/index?type=in_app",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"notifications",
								"index"
							],
							"query": [
								{
									"key": "type",
									"value": "in_app"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "staff app_notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Staff_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/notifications/index?type=in_app",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"notifications",
								"index"
							],
							"query": [
								{
									"key": "type",
									"value": "in_app"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "adhoc payment",
			"item": [
				{
					"name": "form-structure",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}payment/form-structure/fields/customer_account",
							"host": [
								"{{Url}}payment"
							],
							"path": [
								"form-structure",
								"fields",
								"customer_account"
							]
						}
					},
					"response": []
				},
				{
					"name": "post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"form_id\": 2,\r\n    \"data\": [\r\n        {\r\n            \"customer_id\": \"25\",\r\n            \"amount\": \"+40\",\r\n            \"transaction_date\": \"25-04-2024\",\r\n            \"transaction_remarks\": \"test result\",\r\n            \"reference\": \"https://staging-booking.agilecyber.com/files/files/1/calender/appstore (5).png\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}payment/payment/adhoc_transaction",
							"host": [
								"{{Url}}payment"
							],
							"path": [
								"payment",
								"adhoc_transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON data\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"// Initialize variables to store the adhoc ID\r",
									"let adhocID = null;\r",
									"\r",
									"// Loop through each transaction in the response data\r",
									"for (const transaction of responseData.data) {\r",
									"    // Check if the transaction type is \"adhoc\"\r",
									"    if (transaction.transaction_type === \"adhoc\") {\r",
									"        // Set the adhoc ID if found\r",
									"        adhocID = transaction.id;\r",
									"        break; // Stop looping once adhoc ID is found\r",
									"    }\r",
									"}\r",
									"\r",
									"// Set the environment variable with the adhoc ID\r",
									"pm.environment.set(\"adhoc_id\", adhocID);\r",
									"\r",
									"// Log the adhoc ID for verification (optional)\r",
									"console.log(\"Adhoc ID:\", pm.environment.get(\"adhoc_id\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}payment/payment/list/customer/accounts",
							"host": [
								"{{Url}}payment"
							],
							"path": [
								"payment",
								"list",
								"customer",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin list view - customer account",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}payment/payment/view/admin/accounts",
							"host": [
								"{{Url}}payment"
							],
							"path": [
								"payment",
								"view",
								"admin",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin view customer accounts",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}payment/payment/list/admin/accounts?user=1951",
							"host": [
								"{{Url}}payment"
							],
							"path": [
								"payment",
								"list",
								"admin",
								"accounts"
							],
							"query": [
								{
									"key": "user",
									"value": "1951"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "adhoc-delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Url}}/payment/payment/adhoc_transaction/delete?id={{adhoc_id}}",
							"host": [
								"{{Url}}"
							],
							"path": [
								"payment",
								"payment",
								"adhoc_transaction",
								"delete"
							],
							"query": [
								{
									"key": "id",
									"value": "{{adhoc_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Statement",
			"item": [
				{
					"name": "list statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"if (data.data.length > 0) {\r",
									"    postman.setEnvironmentVariable(\"statement_id\", data.data[0]['id']);\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}invoice/admin/list/statements",
							"host": [
								"{{Url}}invoice"
							],
							"path": [
								"admin",
								"list",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "list statement -customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"if (data.data.length > 0) {\r",
									"    postman.setEnvironmentVariable(\"statement_id\", data.data[0]['id']);\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}/invoice/list/statements",
							"host": [
								"{{Url}}"
							],
							"path": [
								"invoice",
								"list",
								"statements"
							]
						}
					},
					"response": []
				},
				{
					"name": "view statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Admin_refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}invoice/admin/list/statements?id={{statement_id}}",
							"host": [
								"{{Url}}invoice"
							],
							"path": [
								"admin",
								"list",
								"statements"
							],
							"query": [
								{
									"key": "id",
									"value": "{{statement_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "logout API",
			"item": [
				{
					"name": "logout",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{Staff_refresh_token}}\",\r\n    \"device_id\": \"resert\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/logout",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "logout API",
			"item": [
				{
					"name": "logout",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{Admin_refresh_token}}\",\r\n    \"device_id\": \"resert\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/user/auth/logout",
							"host": [
								"{{Url}}"
							],
							"path": [
								"user",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "help icon",
			"item": [
				{
					"name": "help icon API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Url}}user/notifications/index?category=help",
							"host": [
								"{{Url}}user"
							],
							"path": [
								"notifications",
								"index"
							],
							"query": [
								{
									"key": "category",
									"value": "help"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}